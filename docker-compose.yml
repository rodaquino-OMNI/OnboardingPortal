version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: onboarding-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret_root_pass}
      MYSQL_DATABASE: ${DB_DATABASE:-onboarding_portal}
      MYSQL_USER: ${DB_USERNAME:-onboarding_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret_pass}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./omni-portal/backend/database/docker-init:/docker-entrypoint-initdb.d
    networks:
      - onboarding_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret_root_pass}"]
      timeout: 20s
      retries: 10
      interval: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: onboarding-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - onboarding_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      interval: 5s
    command: redis-server --appendonly yes

  # Laravel Backend API
  backend:
    build:
      context: ./omni-portal/backend
      dockerfile: Dockerfile
      args:
        - PHP_VERSION=8.3
    container_name: onboarding-backend
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-onboarding_portal}
      - DB_USERNAME=${DB_USERNAME:-onboarding_user}
      - DB_PASSWORD=${DB_PASSWORD:-secret_pass}
      - CACHE_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=null
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./omni-portal/backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
      - backend_storage:/var/www/html/storage
    networks:
      - onboarding_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      timeout: 10s
      retries: 5
      interval: 10s
    command: >
      sh -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan key:generate --force &&
        php artisan migrate --force &&
        php artisan db:seed --class=TestUserSeeder --force &&
        php artisan db:seed --class=QuestionnaireSeeder --force &&
        php artisan db:seed --class=FeatureFlagSeeder --force &&
        php artisan config:cache &&
        php artisan route:cache &&
        php artisan view:cache &&
        php artisan serve --host=0.0.0.0 --port=8000
      "

  # Next.js Frontend
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: onboarding-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-8000}/api/v1
      - NEXT_PUBLIC_APP_ENV=${APP_ENV:-development}
      - NEXT_PUBLIC_DEPLOYMENT_STAGE=docker
      - NEXT_PUBLIC_REGISTRATION_ENABLED=true
      - NEXT_PUBLIC_REGISTRATION_ROLLOUT_PERCENTAGE=100
      - NEXT_PUBLIC_HEALTH_MODULE_ENABLED=true
      - NEXT_PUBLIC_DEBUG=true
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - onboarding_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/_sandbox"]
      timeout: 10s
      retries: 5
      interval: 10s
    command: pnpm dev

  # Nginx Reverse Proxy (Production-ready)
  nginx:
    image: nginx:alpine
    container_name: onboarding-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - onboarding_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 5s
      retries: 3
      interval: 10s

networks:
  onboarding_network:
    driver: bridge
    name: onboarding_network

volumes:
  mysql_data:
    driver: local
    name: onboarding_mysql_data
  redis_data:
    driver: local
    name: onboarding_redis_data
  backend_vendor:
    driver: local
    name: onboarding_backend_vendor
  backend_storage:
    driver: local
    name: onboarding_backend_storage
