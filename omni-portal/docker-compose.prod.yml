# Production Docker Compose with Secure Secrets Management
# This configuration uses Docker secrets for secure credential management

services:
  mysql:
    image: mysql:8.0
    container_name: omni_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: ${DB_DATABASE:-onboarding_portal}
      MYSQL_USER: ${DB_USERNAME:-onboarding}
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    secrets:
      - mysql_root_password
      - mysql_password
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=${MYSQL_INNODB_BUFFER_POOL_SIZE:-1G}
      --max-connections=${MYSQL_MAX_CONNECTIONS:-200}
      --slow-query-log=1
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/mysql_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: omni_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass-file /run/secrets/redis_password
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    secrets:
      - redis_password
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: omni_backend_prod
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application Configuration
      APP_ENV: ${APP_ENV:-production}
      APP_DEBUG: ${APP_DEBUG:-false}
      APP_URL: ${APP_URL}
      APP_TIMEZONE: ${APP_TIMEZONE:-UTC}
      LOG_CHANNEL: ${LOG_CHANNEL:-stack}
      LOG_LEVEL: ${LOG_LEVEL:-error}
      
      # Database Configuration
      DB_CONNECTION: ${DB_CONNECTION:-mysql}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-onboarding_portal}
      DB_USERNAME: ${DB_USERNAME:-onboarding}
      
      # Cache and Session Configuration
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Mail Configuration
      MAIL_MAILER: ${MAIL_MAILER:-smtp}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_ENCRYPTION: ${MAIL_ENCRYPTION:-tls}
      MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME}
      
      # AWS Configuration (if using AWS services)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      AWS_BUCKET: ${AWS_BUCKET}
      
      # Security Configuration
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      SESSION_LIFETIME: ${SESSION_LIFETIME:-120}
      SANCTUM_EXPIRATION: ${SANCTUM_EXPIRATION:-null}
    secrets:
      - app_key
      - db_password
      - redis_password
      - mail_password
      - jwt_secret
    volumes:
      - ./backend/storage:/var/www/backend/storage
      - ./backend/bootstrap/cache:/var/www/backend/bootstrap/cache
    healthcheck:
      test: ["CMD", "sh", "-c", "cd /var/www/backend && php artisan health:check"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: omni_frontend_prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # Next.js Configuration
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      HOSTNAME: "0.0.0.0"
      PORT: 3000
      
      # Public API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-Omni Onboarding Portal}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      
      # Feature Flags
      NEXT_PUBLIC_ENABLE_PWA: ${NEXT_PUBLIC_ENABLE_PWA:-true}
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${NEXT_PUBLIC_ENABLE_ANALYTICS:-false}
      
      # Upload Configuration
      NEXT_PUBLIC_MAX_FILE_SIZE: ${NEXT_PUBLIC_MAX_FILE_SIZE:-10485760}
      NEXT_PUBLIC_ALLOWED_FILE_TYPES: ${NEXT_PUBLIC_ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/webp,application/pdf}
      
      # Session Configuration
      NEXT_PUBLIC_SESSION_TIMEOUT: ${NEXT_PUBLIC_SESSION_TIMEOUT:-1800000}
      NEXT_PUBLIC_SESSION_WARNING_TIME: ${NEXT_PUBLIC_SESSION_WARNING_TIME:-300000}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:1.25.3-alpine
    container_name: omni_nginx_prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/security.conf:/etc/nginx/security.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./backend/public:/var/www/backend/public
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Queue Worker for background job processing
  queue:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: omni_queue_prod
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_ENV: ${APP_ENV:-production}
      APP_DEBUG: ${APP_DEBUG:-false}
      DB_CONNECTION: ${DB_CONNECTION:-mysql}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-onboarding_portal}
      DB_USERNAME: ${DB_USERNAME:-onboarding}
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
    secrets:
      - app_key
      - db_password
      - redis_password
    volumes:
      - ./backend/storage:/var/www/backend/storage
    deploy:
      replicas: ${QUEUE_WORKERS:-2}
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler for cron jobs
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: omni_scheduler_prod
    restart: unless-stopped
    command: >
      sh -c "while true; do
        php artisan schedule:run >> /var/log/cron.log 2>&1;
        sleep 60;
      done"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_ENV: ${APP_ENV:-production}
      APP_DEBUG: ${APP_DEBUG:-false}
      DB_CONNECTION: ${DB_CONNECTION:-mysql}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-onboarding_portal}
      DB_USERNAME: ${DB_USERNAME:-onboarding}
      CACHE_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
    secrets:
      - app_key
      - db_password
      - redis_password
    volumes:
      - ./backend/storage:/var/www/backend/storage
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: omni_certbot_prod
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - omni-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Monitoring Services (Optional - can be disabled by setting ENABLE_MONITORING=false)
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: omni_prometheus_prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - omni-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:10.2.0
    container_name: omni_grafana_prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    secrets:
      - grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - omni-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Docker Secrets Configuration
secrets:
  # Database Secrets
  mysql_root_password:
    external: true
    name: omni_mysql_root_password
  mysql_password:
    external: true
    name: omni_mysql_password
  db_password:
    external: true
    name: omni_db_password
  
  # Redis Secret
  redis_password:
    external: true
    name: omni_redis_password
  
  # Application Secrets
  app_key:
    external: true
    name: omni_app_key
  jwt_secret:
    external: true
    name: omni_jwt_secret
  
  # Mail Secret
  mail_password:
    external: true
    name: omni_mail_password
  
  # Monitoring Secrets
  grafana_admin_password:
    external: true
    name: omni_grafana_admin_password

# Persistent Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network Configuration
networks:
  omni-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16