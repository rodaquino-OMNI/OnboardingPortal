name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: omni-portal/frontend/package-lock.json

      - name: Setup PHP (for backend)
        if: matrix.component == 'backend'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install dependencies - Frontend
        if: matrix.component == 'frontend'
        working-directory: omni-portal/frontend
        run: npm ci

      - name: Install dependencies - Backend
        if: matrix.component == 'backend'
        working-directory: omni-portal/backend
        run: composer install --no-dev --optimize-autoloader

      - name: Run npm audit (Frontend)
        if: matrix.component == 'frontend'
        working-directory: omni-portal/frontend
        run: |
          npm audit --audit-level=high --json > npm-audit-results.json || true
          cat npm-audit-results.json

      - name: Run Composer security checker (Backend)
        if: matrix.component == 'backend'
        working-directory: omni-portal/backend
        run: |
          composer require --dev roave/security-advisories:dev-latest || true
          composer audit --format=json > composer-audit-results.json || true
          cat composer-audit-results.json

      - name: Snyk Security Scan - Frontend
        if: matrix.component == 'frontend'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=omni-portal/frontend/package.json --json-file-output=snyk-frontend-results.json

      - name: Snyk Security Scan - Backend
        if: matrix.component == 'backend'
        uses: snyk/actions/php@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=omni-portal/backend/composer.lock --json-file-output=snyk-backend-results.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.component }}
          path: |
            *-audit-results.json
            snyk-*-results.json
          retention-days: 30

  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: php, javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:php,javascript"

      - name: SemGrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/php-security
            p/javascript-security
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:security-scan ./omni-portal/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:security-scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          category: 'container-${{ matrix.service }}'

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: '${{ matrix.service }}:security-scan'
          args: --file=omni-portal/${{ matrix.service }}/Dockerfile --json-file-output=snyk-container-${{ matrix.service }}.json

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-security-${{ matrix.service }}
          path: |
            trivy-${{ matrix.service }}-results.sarif
            snyk-container-${{ matrix.service }}.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for secret scanning
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure as Code (IaC) security
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
          category: 'iac-security'

      - name: Terrascan IaC Security Scan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_version: 'v1'
          policy_type: 'aws'
          only_warn: true
          sarif_upload: true

  # Web application security testing
  web-security:
    name: Web Application Security Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start application
        run: |
          cd omni-portal
          docker-compose up -d
          sleep 60

      - name: Wait for application to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: OWASP ZAP Full Scan
        if: github.event_name == 'schedule'
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Stop application
        if: always()
        run: |
          cd omni-portal
          docker-compose down

  # Security compliance check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: LGPD Compliance Check
        run: |
          echo "Checking LGPD compliance..."
          # Check for personal data handling
          # Verify consent mechanisms
          # Check data retention policies
          # Validate privacy policy implementation
          echo "LGPD compliance check completed"

      - name: OWASP Security Headers Check
        run: |
          echo "Checking security headers compliance..."
          # Verify security headers implementation
          # Check CSP policies
          # Validate HTTPS enforcement
          echo "Security headers check completed"

      - name: Database Security Check
        run: |
          echo "Checking database security configuration..."
          # Verify encryption at rest
          # Check access controls
          # Validate backup encryption
          echo "Database security check completed"

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-security, secret-scan, iac-security, compliance-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-artifacts

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md
          echo "## Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Scans Performed:" >> security-report.md
          echo "- [x] Dependency vulnerability scanning" >> security-report.md
          echo "- [x] Static Application Security Testing (SAST)" >> security-report.md
          echo "- [x] Container security scanning" >> security-report.md
          echo "- [x] Secret scanning" >> security-report.md
          echo "- [x] Infrastructure as Code security" >> security-report.md
          echo "- [x] Compliance checks" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Recommendations:" >> security-report.md
          echo "- Review and address any high-severity vulnerabilities" >> security-report.md
          echo "- Update dependencies with known vulnerabilities" >> security-report.md
          echo "- Implement additional security headers if needed" >> security-report.md
          echo "- Regular security training for development team" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

  # Emergency security notification
  security-alert:
    name: Security Alert
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-security, secret-scan]
    if: failure()
    
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "🚨 SECURITY ALERT: Critical security scan failure detected!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Security Scan FAILED*\n*Repository:* ${{ github.repository }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n⚠️ Immediate attention required!"
                  }
                }
              ]
            }