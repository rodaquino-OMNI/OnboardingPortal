CREATE TABLE IF NOT EXISTS "migrations" ("id" integer primary key autoincrement not null, "migration" varchar not null, "batch" integer not null);
CREATE TABLE IF NOT EXISTS "personal_access_tokens" ("id" integer primary key autoincrement not null, "tokenable_type" varchar not null, "tokenable_id" integer not null, "name" varchar not null, "token" varchar not null, "abilities" text, "last_used_at" datetime, "expires_at" datetime, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "personal_access_tokens_tokenable_type_tokenable_id_index" on "personal_access_tokens" ("tokenable_type", "tokenable_id");
CREATE UNIQUE INDEX "personal_access_tokens_token_unique" on "personal_access_tokens" ("token");
CREATE TABLE IF NOT EXISTS "companies" ("id" integer primary key autoincrement not null, "name" varchar not null, "cnpj" varchar not null, "trading_name" varchar, "email" varchar not null, "phone" varchar not null, "address" varchar not null, "city" varchar not null, "state" varchar not null, "zip_code" varchar not null, "country" varchar not null default 'BR', "contact_person" varchar not null, "contact_email" varchar not null, "contact_phone" varchar not null, "plan_type" varchar check ("plan_type" in ('basic', 'standard', 'premium', 'enterprise')) not null default 'basic', "max_beneficiaries" integer not null default '50', "is_active" tinyint(1) not null default '1', "contract_start_date" date, "contract_end_date" date, "settings" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE INDEX "companies_cnpj_index" on "companies" ("cnpj");
CREATE INDEX "companies_is_active_index" on "companies" ("is_active");
CREATE INDEX "companies_plan_type_index" on "companies" ("plan_type");
CREATE UNIQUE INDEX "companies_cnpj_unique" on "companies" ("cnpj");
CREATE TABLE IF NOT EXISTS "beneficiaries" ("id" integer primary key autoincrement not null, "user_id" integer not null, "company_id" integer, "cpf" varchar not null, "full_name" varchar not null, "birth_date" date not null, "gender" varchar check ("gender" in ('male', 'female', 'other', 'prefer_not_to_say')), "phone" varchar not null, "mobile_phone" varchar, "address" varchar not null, "number" varchar not null, "complement" varchar, "neighborhood" varchar not null, "city" varchar not null, "state" varchar not null, "zip_code" varchar not null, "country" varchar not null default 'BR', "emergency_contact_name" varchar, "emergency_contact_phone" varchar, "emergency_contact_relationship" varchar, "marital_status" varchar check ("marital_status" in ('single', 'married', 'divorced', 'widowed', 'other')), "occupation" varchar, "monthly_income" numeric, "has_health_insurance" tinyint(1) not null default '0', "health_insurance_provider" varchar, "health_insurance_number" varchar, "onboarding_status" varchar check ("onboarding_status" in ('pending', 'in_progress', 'completed', 'cancelled')) not null default 'pending', "onboarding_step" integer not null default '1', "onboarding_completed_at" datetime, "custom_fields" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "notification_preferences" text, "timezone" varchar not null default 'America/Sao_Paulo', "preferred_language" varchar not null default 'pt', foreign key("user_id") references "users"("id") on delete cascade, foreign key("company_id") references "companies"("id") on delete set null);
CREATE INDEX "beneficiaries_cpf_index" on "beneficiaries" ("cpf");
CREATE INDEX "beneficiaries_company_id_index" on "beneficiaries" ("company_id");
CREATE INDEX "beneficiaries_onboarding_status_index" on "beneficiaries" ("onboarding_status");
CREATE INDEX "beneficiaries_user_id_company_id_index" on "beneficiaries" ("user_id", "company_id");
CREATE UNIQUE INDEX "beneficiaries_cpf_unique" on "beneficiaries" ("cpf");
CREATE TABLE IF NOT EXISTS "gamification_progress" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "total_points" integer not null default '0', "current_level" integer not null default '1', "points_to_next_level" integer not null default '100', "streak_days" integer not null default '0', "last_activity_date" date, "tasks_completed" integer not null default '0', "perfect_forms" integer not null default '0', "documents_uploaded" integer not null default '0', "health_assessments_completed" integer not null default '0', "profile_completed" tinyint(1) not null default '0', "onboarding_completed" tinyint(1) not null default '0', "badges_earned" text, "achievements" text, "daily_challenges" text, "weekly_goals" text, "engagement_score" numeric not null default '0', "last_badge_earned_at" datetime, "last_level_up_at" datetime, "created_at" datetime, "updated_at" datetime, "company_id" integer, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade);
CREATE INDEX "gamification_progress_beneficiary_id_index" on "gamification_progress" ("beneficiary_id");
CREATE INDEX "gamification_progress_current_level_index" on "gamification_progress" ("current_level");
CREATE INDEX "gamification_progress_total_points_index" on "gamification_progress" ("total_points");
CREATE INDEX "gamification_progress_last_activity_date_index" on "gamification_progress" ("last_activity_date");
CREATE TABLE IF NOT EXISTS "health_questionnaires" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "questionnaire_type" varchar not null, "status" varchar check ("status" in ('draft', 'completed', 'reviewed', 'archived')) not null default 'draft', "height" numeric, "weight" numeric, "bmi" numeric, "blood_type" varchar, "blood_pressure_status" varchar check ("blood_pressure_status" in ('normal', 'elevated', 'high_stage_1', 'high_stage_2', 'hypertensive_crisis')), "blood_pressure_values" varchar, "chronic_conditions" text, "current_medications" text, "allergies" text, "surgeries" text, "family_history" text, "smoking_status" varchar check ("smoking_status" in ('never', 'former', 'current', 'occasional')), "cigarettes_per_day" integer, "alcohol_consumption" varchar check ("alcohol_consumption" in ('never', 'rarely', 'moderate', 'heavy')), "physical_activity_level" varchar check ("physical_activity_level" in ('sedentary', 'light', 'moderate', 'active', 'very_active')), "exercise_frequency_per_week" integer, "diet_type" varchar check ("diet_type" in ('omnivore', 'vegetarian', 'vegan', 'pescatarian', 'other')), "sleep_hours_average" integer, "sleep_quality" varchar check ("sleep_quality" in ('very_poor', 'poor', 'fair', 'good', 'excellent')), "stress_level" varchar check ("stress_level" in ('very_low', 'low', 'moderate', 'high', 'very_high')), "mental_health_concerns" tinyint(1) not null default '0', "mental_health_conditions" text, "currently_in_therapy" tinyint(1) not null default '0', "taking_mental_health_medication" tinyint(1) not null default '0', "is_pregnant" tinyint(1), "pregnancy_weeks" integer, "last_menstrual_period" date, "uses_contraception" tinyint(1), "contraception_method" varchar, "last_medical_checkup" date, "last_dental_checkup" date, "last_eye_exam" date, "vaccinations" text, "screening_tests" text, "additional_notes" text, "custom_responses" text, "completed_at" datetime, "reviewed_by" integer, "reviewed_at" datetime, "review_notes" text, "completion_percentage" integer not null default '0', "accuracy_score" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "response_timestamps" text, "response_durations" text, "total_duration_seconds" integer, "has_suspicious_patterns" tinyint(1) not null default '0', "suspicious_patterns" text, "fraud_risk_score" numeric, "risk_factors" text, "consistency_checks" text, "device_fingerprint" varchar, "ip_address" varchar, "user_agent" varchar, "geolocation" text, "requires_manual_review" tinyint(1) not null default '0', "review_reason" varchar, "flagged_at" datetime, "flagged_by" integer, "response_patterns" text, "ai_insights" text, "revision_count" integer not null default '0', "revision_history" text, "processing_status" text, "risk_scores_snapshot" text, "progressive_layer" varchar, "progressive_scores" text, "progressive_actions" text, "progressive_next_steps" text, "fraud_detection_score" numeric, "consistency_score" numeric, "response_time_analysis" text, "clinical_decisions" text, "icd10_codes" text, "severity_level" varchar, "confidence_score" integer not null default '0', "emergency_protocol" text, "emergency_detected" tinyint(1) not null default '0', "emergency_timestamp" datetime, "clinical_recommendations" text, "time_to_intervention" integer, "escalation_required" tinyint(1) not null default '0', "assessment_metrics" text, "completion_rate" numeric not null default '0', "average_response_time" integer, "audit_trail" text, "consent_timestamp" datetime, "hipaa_compliant" tinyint(1) not null default '1', "lgpd_compliant" tinyint(1) not null default '1', "template_id" integer, "responses" text, "current_section" varchar, "started_at" datetime, "last_saved_at" datetime, "risk_scores" text, "metadata" text, "recommendations" text, "company_id" integer, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("reviewed_by") references "users"("id") on delete set null);
CREATE INDEX "health_questionnaires_beneficiary_id_index" on "health_questionnaires" ("beneficiary_id");
CREATE INDEX "health_questionnaires_questionnaire_type_index" on "health_questionnaires" ("questionnaire_type");
CREATE INDEX "health_questionnaires_status_index" on "health_questionnaires" ("status");
CREATE INDEX "health_questionnaires_completed_at_index" on "health_questionnaires" ("completed_at");
CREATE TABLE IF NOT EXISTS "documents" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "uploaded_by" integer not null, "document_type" varchar not null, "document_category" varchar not null, "original_name" varchar not null, "stored_name" varchar not null, "file_path" varchar not null, "mime_type" varchar not null, "file_size" integer not null, "file_extension" varchar not null, "status" varchar check ("status" in ('pending', 'approved', 'rejected', 'expired')) not null default 'pending', "rejection_reason" text, "verified_by" integer, "verified_at" datetime, "expiration_date" date, "is_encrypted" tinyint(1) not null default '1', "encryption_key" varchar, "metadata" text, "ocr_data" text, "is_sensitive" tinyint(1) not null default '0', "checksum" varchar, "version" integer not null default '1', "parent_document_id" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "extracted_data" text, "validation_results" text, "validation_status" varchar, "processing_method" varchar, "quality_score" numeric, "confidence_score" numeric, "processing_started_at" datetime, "processing_completed_at" datetime, "error_message" text, "type" varchar, "original_filename" varchar, "description" text, "processed_at" datetime, "processing_options" text, "company_id" integer, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("uploaded_by") references "users"("id") on delete cascade, foreign key("verified_by") references "users"("id") on delete set null, foreign key("parent_document_id") references "documents"("id") on delete set null);
CREATE INDEX "documents_beneficiary_id_index" on "documents" ("beneficiary_id");
CREATE INDEX "documents_document_type_index" on "documents" ("document_type");
CREATE INDEX "documents_document_category_index" on "documents" ("document_category");
CREATE INDEX "documents_status_index" on "documents" ("status");
CREATE INDEX "documents_expiration_date_index" on "documents" ("expiration_date");
CREATE INDEX "documents_beneficiary_id_document_type_index" on "documents" ("beneficiary_id", "document_type");
CREATE TABLE IF NOT EXISTS "interview_slots" ("id" integer primary key autoincrement not null, "healthcare_professional_id" integer not null, "date" date not null, "start_time" time not null, "end_time" time not null, "duration_minutes" integer not null default '30', "is_available" tinyint(1) not null default '1', "status" varchar check ("status" in ('available', 'booked', 'blocked', 'completed', 'cancelled')) not null default 'available', "interview_type" varchar check ("interview_type" in ('initial', 'follow_up', 'medical', 'psychological', 'nutritional', 'initial_consultation', 'specialty_consultation')) not null default 'initial', "is_recurring" tinyint(1) not null default '0', "recurrence_pattern" varchar check ("recurrence_pattern" in ('daily', 'weekly', 'biweekly', 'monthly')), "recurrence_end_date" date, "recurring_pattern" varchar check ("recurring_pattern" in ('daily', 'weekly', 'biweekly', 'monthly')), "max_bookings" integer not null default '1', "current_bookings" integer not null default '0', "price" numeric, "meeting_link" varchar, "meeting_type" varchar check ("meeting_type" in ('in_person', 'video', 'phone')) not null default 'video', "location" varchar, "notes" text, "availability_rules" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "meeting_platform" varchar, "break_duration" integer not null default '0', "buffer_minutes" integer not null default '15', "timezone" varchar not null default 'America/Sao_Paulo', "specialization_required" varchar, "languages_available" text, "preparation_requirements" text, "cancellation_deadline_hours" integer not null default '24', "reschedule_deadline_hours" integer not null default '24', "supported_appointment_types" text, "is_telemedicine_enabled" tinyint(1) not null default '1', "technology_requirements" text, "allows_urgent_booking" tinyint(1) not null default '0', "urgent_booking_fee" integer not null default '0', "preparation_time_by_type" text, "auto_confirm_bookings" tinyint(1) not null default '0', "blocked_appointment_types" text, foreign key("healthcare_professional_id") references "users"("id") on delete cascade);
CREATE INDEX "interview_slots_healthcare_professional_id_index" on "interview_slots" ("healthcare_professional_id");
CREATE INDEX "interview_slots_date_index" on "interview_slots" ("date");
CREATE INDEX "interview_slots_status_index" on "interview_slots" ("status");
CREATE INDEX "interview_slots_date_start_time_index" on "interview_slots" ("date", "start_time");
CREATE INDEX "interview_slots_healthcare_professional_id_date_status_index" on "interview_slots" ("healthcare_professional_id", "date", "status");
CREATE TABLE IF NOT EXISTS "audit_logs" ("id" integer primary key autoincrement not null, "user_id" integer, "user_type" varchar, "event_type" varchar not null, "event_category" varchar not null, "model_type" varchar, "model_id" integer, "action" varchar not null, "old_values" text, "new_values" text, "changed_fields" text, "ip_address" varchar, "user_agent" varchar, "browser" varchar, "browser_version" varchar, "platform" varchar, "device_type" varchar, "country" varchar, "city" varchar, "latitude" numeric, "longitude" numeric, "session_id" varchar, "request_id" varchar, "request_method" varchar, "request_url" varchar, "request_headers" text, "request_body" text, "response_status" integer, "response_time" numeric, "is_sensitive_data" tinyint(1) not null default '0', "is_successful" tinyint(1) not null default '1', "error_message" text, "data_classification" varchar, "legal_basis" varchar, "user_consent" tinyint(1) not null default '0', "consent_timestamp" datetime, "purpose" varchar, "retention_days" integer, "expires_at" datetime, "tags" text, "context" text, "created_at" datetime, "updated_at" datetime, "company_id" integer, foreign key("user_id") references "users"("id") on delete set null);
CREATE INDEX "audit_logs_user_id_index" on "audit_logs" ("user_id");
CREATE INDEX "audit_logs_event_type_index" on "audit_logs" ("event_type");
CREATE INDEX "audit_logs_event_category_index" on "audit_logs" ("event_category");
CREATE INDEX "audit_logs_model_type_index" on "audit_logs" ("model_type");
CREATE INDEX "audit_logs_model_id_index" on "audit_logs" ("model_id");
CREATE INDEX "audit_logs_action_index" on "audit_logs" ("action");
CREATE INDEX "audit_logs_created_at_index" on "audit_logs" ("created_at");
CREATE INDEX "audit_logs_ip_address_index" on "audit_logs" ("ip_address");
CREATE INDEX "audit_logs_is_sensitive_data_index" on "audit_logs" ("is_sensitive_data");
CREATE INDEX "audit_logs_expires_at_index" on "audit_logs" ("expires_at");
CREATE INDEX "audit_logs_model_type_model_id_index" on "audit_logs" ("model_type", "model_id");
CREATE INDEX "audit_logs_user_id_event_type_created_at_index" on "audit_logs" ("user_id", "event_type", "created_at");
CREATE INDEX "audit_logs_event_category_created_at_index" on "audit_logs" ("event_category", "created_at");
CREATE TABLE IF NOT EXISTS "gamification_levels" ("id" integer primary key autoincrement not null, "level_number" integer not null, "name" varchar not null, "title" varchar, "points_required" integer not null, "points_to_next" integer, "color_theme" varchar not null default '#3B82F6', "icon" varchar, "rewards" text, "unlocked_features" text, "description" text, "discount_percentage" numeric not null default '0', "priority_support_level" integer not null default '0', "created_at" datetime, "updated_at" datetime);
CREATE INDEX "gamification_levels_level_number_index" on "gamification_levels" ("level_number");
CREATE INDEX "gamification_levels_points_required_index" on "gamification_levels" ("points_required");
CREATE UNIQUE INDEX "gamification_levels_level_number_unique" on "gamification_levels" ("level_number");
CREATE TABLE IF NOT EXISTS "beneficiary_badges" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "gamification_badge_id" integer not null, "earned_at" datetime not null, "earned_count" integer not null default '1', "earned_context" text, "is_featured" tinyint(1) not null default '0', "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("gamification_badge_id") references "gamification_badges"("id") on delete cascade);
CREATE UNIQUE INDEX "bb_user_badge_count_unique" on "beneficiary_badges" ("beneficiary_id", "gamification_badge_id", "earned_count");
CREATE INDEX "bb_beneficiary_id_index" on "beneficiary_badges" ("beneficiary_id");
CREATE INDEX "bb_badge_id_index" on "beneficiary_badges" ("gamification_badge_id");
CREATE INDEX "bb_earned_at_index" on "beneficiary_badges" ("earned_at");
CREATE TABLE IF NOT EXISTS "notifications" ("id" integer primary key autoincrement not null, "type" varchar not null, "notifiable_type" varchar not null, "notifiable_id" varchar not null, "data" text not null, "read_at" datetime, "channel" varchar not null default 'database', "priority" varchar check ("priority" in ('low', 'normal', 'high', 'urgent')) not null default 'normal', "category" varchar, "action_url" varchar, "action_text" varchar, "expires_at" datetime, "metadata" text, "created_at" datetime, "updated_at" datetime, "company_id" integer);
CREATE INDEX "notifications_notifiable_index" on "notifications" ("notifiable_type", "notifiable_id");
CREATE INDEX "notifications_read_at_index" on "notifications" ("read_at");
CREATE INDEX "notifications_channel_index" on "notifications" ("channel");
CREATE INDEX "notifications_priority_index" on "notifications" ("priority");
CREATE INDEX "notifications_created_at_index" on "notifications" ("created_at");
CREATE TABLE IF NOT EXISTS "document_types" ("id" integer primary key autoincrement not null, "code" varchar not null, "name" varchar not null, "category" varchar not null, "description" text, "is_required" tinyint(1) not null default '0', "is_active" tinyint(1) not null default '1', "accepted_formats" text, "max_file_size" integer not null default '10485760', "min_file_size" integer not null default '1024', "requires_verification" tinyint(1) not null default '1', "expires" tinyint(1) not null default '0', "validity_days" integer, "validation_rules" text, "ocr_fields" text, "sort_order" integer not null default '0', "required_for_steps" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "document_types_code_index" on "document_types" ("code");
CREATE INDEX "document_types_category_index" on "document_types" ("category");
CREATE INDEX "document_types_is_required_index" on "document_types" ("is_required");
CREATE INDEX "document_types_is_active_index" on "document_types" ("is_active");
CREATE UNIQUE INDEX "document_types_code_unique" on "document_types" ("code");
CREATE TABLE IF NOT EXISTS "health_categories" ("id" integer primary key autoincrement not null, "name" varchar not null, "slug" varchar not null, "description" text, "icon" varchar, "color" varchar not null default '#3B82F6', "parent_id" integer, "sort_order" integer not null default '0', "is_active" tinyint(1) not null default '1', "requires_specialist" tinyint(1) not null default '0', "related_conditions" text, "risk_factors" text, "prevention_tips" text, "created_at" datetime, "updated_at" datetime, foreign key("parent_id") references "health_categories"("id") on delete cascade);
CREATE INDEX "health_categories_slug_index" on "health_categories" ("slug");
CREATE INDEX "health_categories_parent_id_index" on "health_categories" ("parent_id");
CREATE INDEX "health_categories_is_active_index" on "health_categories" ("is_active");
CREATE UNIQUE INDEX "health_categories_slug_unique" on "health_categories" ("slug");
CREATE TABLE IF NOT EXISTS "questionnaire_templates" ("id" integer primary key autoincrement not null, "name" varchar not null, "code" varchar not null, "description" text, "type" varchar check ("type" in ('initial', 'periodic', 'specific', 'custom')) not null default 'custom', "health_category_id" integer, "sections" text, "scoring_rules" text, "risk_assessment_rules" text, "is_active" tinyint(1) not null default '1', "version" integer not null default '1', "estimated_minutes" integer not null default '10', "required_for" text, "languages" text, "created_at" datetime, "updated_at" datetime, foreign key("health_category_id") references "health_categories"("id") on delete set null);
CREATE INDEX "questionnaire_templates_code_index" on "questionnaire_templates" ("code");
CREATE INDEX "questionnaire_templates_type_index" on "questionnaire_templates" ("type");
CREATE INDEX "questionnaire_templates_health_category_id_index" on "questionnaire_templates" ("health_category_id");
CREATE INDEX "questionnaire_templates_is_active_index" on "questionnaire_templates" ("is_active");
CREATE UNIQUE INDEX "questionnaire_templates_code_unique" on "questionnaire_templates" ("code");
CREATE INDEX "health_questionnaires_fraud_risk_score_index" on "health_questionnaires" ("fraud_risk_score");
CREATE INDEX "health_questionnaires_has_suspicious_patterns_index" on "health_questionnaires" ("has_suspicious_patterns");
CREATE INDEX "health_questionnaires_requires_manual_review_index" on "health_questionnaires" ("requires_manual_review");
CREATE INDEX "health_questionnaires_device_fingerprint_index" on "health_questionnaires" ("device_fingerprint");
CREATE INDEX "health_questionnaires_flagged_at_index" on "health_questionnaires" ("flagged_at");
CREATE TABLE IF NOT EXISTS "clinical_alerts" ("id" integer primary key autoincrement not null, "alert_uuid" varchar not null, "beneficiary_id" integer not null, "questionnaire_id" integer, "alert_type" varchar check ("alert_type" in ('risk_threshold', 'risk_trend', 'population_outlier', 'combined_factors', 'follow_up_due')) not null, "category" varchar check ("category" in ('mental_health', 'substance_abuse', 'cardiovascular', 'chronic_disease', 'allergy_safety', 'preventive_care')) not null, "priority" varchar check ("priority" in ('low', 'medium', 'high', 'urgent', 'emergency')) not null, "risk_score" integer not null, "risk_factors" text, "risk_scores_detail" text, "title" varchar not null, "message" text not null, "clinical_recommendations" text, "intervention_options" text, "status" varchar check ("status" in ('pending', 'acknowledged', 'in_progress', 'resolved', 'escalated', 'dismissed')) not null default 'pending', "assigned_to" integer, "acknowledged_by" integer, "resolved_by" integer, "acknowledged_at" datetime, "started_at" datetime, "resolved_at" datetime, "escalated_at" datetime, "sla_hours" integer not null default '24', "sla_deadline" datetime not null, "sla_breached" tinyint(1) not null default '0', "clinical_notes" text, "resolution_notes" text, "metadata" text, "audit_trail" text, "created_at" datetime, "updated_at" datetime, "predicted_outcomes" text, "prediction_confidence" float, "similar_cases" text, "recommended_interventions_ml" text, "webhook_notified_at" datetime, "webhook_notification_status" varchar check ("webhook_notification_status" in ('pending', 'delivered', 'failed', 'failed_permanently')), "webhook_error" text, "estimated_cost_impact" numeric, "actual_cost_impact" numeric, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("questionnaire_id") references "health_questionnaires"("id"), foreign key("assigned_to") references "users"("id"), foreign key("acknowledged_by") references "users"("id"), foreign key("resolved_by") references "users"("id"));
CREATE INDEX "clinical_alerts_status_priority_index" on "clinical_alerts" ("status", "priority");
CREATE INDEX "clinical_alerts_beneficiary_id_created_at_index" on "clinical_alerts" ("beneficiary_id", "created_at");
CREATE INDEX "clinical_alerts_category_status_index" on "clinical_alerts" ("category", "status");
CREATE INDEX "clinical_alerts_assigned_to_status_index" on "clinical_alerts" ("assigned_to", "status");
CREATE INDEX "clinical_alerts_sla_deadline_index" on "clinical_alerts" ("sla_deadline");
CREATE INDEX "clinical_alerts_alert_type_created_at_index" on "clinical_alerts" ("alert_type", "created_at");
CREATE UNIQUE INDEX "clinical_alerts_alert_uuid_unique" on "clinical_alerts" ("alert_uuid");
CREATE TABLE IF NOT EXISTS "clinical_reports" ("id" integer primary key autoincrement not null, "report_uuid" varchar not null, "report_type" varchar check ("report_type" in ('daily_summary', 'weekly_analysis', 'monthly_comprehensive', 'quarterly_trends', 'annual_review', 'custom_period', 'real_time_dashboard')) not null, "period_start" date not null, "period_end" date not null, "format" varchar check ("format" in ('pdf', 'excel', 'json', 'csv')) not null, "file_path" varchar, "file_size" integer, "sections_included" text, "filters_applied" text, "statistics" text, "risk_distribution" text, "alert_summary" text, "intervention_outcomes" text, "total_patients_analyzed" integer not null, "high_risk_patients" integer not null, "interventions_recommended" integer not null, "follow_ups_scheduled" integer not null, "key_findings" text, "trends_identified" text, "recommendations" text, "generated_by" integer, "generated_at" datetime not null, "generation_time_seconds" integer not null, "generation_status" varchar check ("generation_status" in ('pending', 'processing', 'completed', 'failed')) not null default 'pending', "error_message" text, "recipients" text, "sent_at" datetime, "is_scheduled" tinyint(1) not null default '0', "schedule_cron" varchar, "authorized_viewers" text, "view_count" integer not null default '0', "last_viewed_at" datetime, "contains_pii" tinyint(1) not null default '0', "is_anonymized" tinyint(1) not null default '1', "compliance_metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("generated_by") references "users"("id"));
CREATE INDEX "clinical_reports_report_type_period_start_period_end_index" on "clinical_reports" ("report_type", "period_start", "period_end");
CREATE INDEX "clinical_reports_generation_status_created_at_index" on "clinical_reports" ("generation_status", "created_at");
CREATE INDEX "clinical_reports_generated_by_index" on "clinical_reports" ("generated_by");
CREATE INDEX "clinical_reports_is_scheduled_index" on "clinical_reports" ("is_scheduled");
CREATE UNIQUE INDEX "clinical_reports_report_uuid_unique" on "clinical_reports" ("report_uuid");
CREATE TABLE IF NOT EXISTS "alert_workflows" ("id" integer primary key autoincrement not null, "workflow_uuid" varchar not null, "alert_id" integer not null, "beneficiary_id" integer not null, "action_type" varchar check ("action_type" in ('alert_created', 'alert_acknowledged', 'assessment_scheduled', 'intervention_planned', 'patient_contacted', 'follow_up_scheduled', 'escalated_to_specialist', 'resolved', 'closed_no_action')) not null, "action_description" text not null, "action_metadata" text, "performed_by" integer not null, "performer_role" varchar, "clinical_notes" text, "assessments_performed" text, "interventions_applied" text, "next_actions" text, "next_review_date" datetime, "assigned_to_next" integer, "outcome" varchar check ("outcome" in ('pending', 'successful', 'partially_successful', 'unsuccessful', 'patient_declined', 'not_applicable')), "outcome_metrics" text, "action_timestamp" datetime not null, "created_at" datetime, "updated_at" datetime, foreign key("alert_id") references "clinical_alerts"("id") on delete cascade, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("performed_by") references "users"("id"), foreign key("assigned_to_next") references "users"("id"));
CREATE INDEX "alert_workflows_alert_id_action_timestamp_index" on "alert_workflows" ("alert_id", "action_timestamp");
CREATE INDEX "alert_workflows_beneficiary_id_action_type_index" on "alert_workflows" ("beneficiary_id", "action_type");
CREATE INDEX "alert_workflows_performed_by_action_timestamp_index" on "alert_workflows" ("performed_by", "action_timestamp");
CREATE INDEX "alert_workflows_next_review_date_index" on "alert_workflows" ("next_review_date");
CREATE UNIQUE INDEX "alert_workflows_workflow_uuid_unique" on "alert_workflows" ("workflow_uuid");
CREATE TABLE IF NOT EXISTS "intervention_templates" ("id" integer primary key autoincrement not null, "name" varchar not null, "description" text not null, "risk_category" varchar check ("risk_category" in ('mental_health', 'substance_abuse', 'cardiovascular', 'chronic_disease', 'allergy_safety', 'preventive_care')) not null, "risk_level" varchar check ("risk_level" in ('low', 'medium', 'high', 'critical')) not null, "recommended_actions" text not null, "resources_needed" text not null, "expected_outcomes" text not null, "typical_duration_days" integer not null, "clinical_guidelines" text, "evidence_references" text, "success_rate" float, "is_active" tinyint(1) not null default '1', "times_used" integer not null default '0', "last_used_at" datetime, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "intervention_templates_risk_category_risk_level_index" on "intervention_templates" ("risk_category", "risk_level");
CREATE INDEX "intervention_templates_is_active_index" on "intervention_templates" ("is_active");
CREATE TABLE IF NOT EXISTS "alert_escalation_rules" ("id" integer primary key autoincrement not null, "trigger_type" varchar check ("trigger_type" in ('sla_breach', 'risk_score_increase', 'no_response', 'critical_finding', 'manual_escalation')) not null, "trigger_conditions" text not null, "escalation_level" varchar check ("escalation_level" in ('team_lead', 'department_head', 'medical_director', 'emergency_response')) not null, "notification_channels" text not null, "recipients_roles" text not null, "is_active" tinyint(1) not null default '1', "times_triggered" integer not null default '0', "created_at" datetime, "updated_at" datetime);
CREATE INDEX "alert_escalation_rules_trigger_type_is_active_index" on "alert_escalation_rules" ("trigger_type", "is_active");
CREATE INDEX "health_questionnaires_created_at_index" on "health_questionnaires" ("created_at");
CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, email_verified_at DATETIME DEFAULT NULL, password VARCHAR(255) DEFAULT NULL, role VARCHAR(255) DEFAULT 'beneficiary' NOT NULL, phone VARCHAR(255) DEFAULT NULL, is_active BOOLEAN DEFAULT 1 NOT NULL, preferred_language VARCHAR(255) DEFAULT 'pt-BR' NOT NULL, preferences CLOB DEFAULT NULL, remember_token VARCHAR(255) DEFAULT NULL, created_at DATETIME DEFAULT NULL, updated_at DATETIME DEFAULT NULL, deleted_at DATETIME DEFAULT NULL, cpf VARCHAR(255) DEFAULT NULL, registration_step VARCHAR(255) DEFAULT 'personal' NOT NULL, lgpd_consent BOOLEAN DEFAULT 0 NOT NULL, lgpd_consent_at DATETIME DEFAULT NULL, lgpd_consent_ip VARCHAR(255) DEFAULT NULL, department VARCHAR(255) DEFAULT NULL, job_title VARCHAR(255) DEFAULT NULL, employee_id VARCHAR(255) DEFAULT NULL, start_date DATE DEFAULT NULL, status VARCHAR(255) DEFAULT 'pending' NOT NULL, last_login_at DATETIME DEFAULT NULL, last_login_ip VARCHAR(255) DEFAULT NULL, failed_login_attempts INTEGER DEFAULT 0 NOT NULL, locked_until DATETIME DEFAULT NULL, "google_id" varchar, "facebook_id" varchar, "instagram_id" varchar, "avatar_url" varchar, "social_provider" varchar, "social_login" tinyint(1) not null default '0', "lgpd_consent_explicit" tinyint(1) not null default '0', "company_id" integer);
CREATE UNIQUE INDEX users_employee_id_unique ON users (employee_id);
CREATE UNIQUE INDEX users_cpf_unique ON users (cpf);
CREATE INDEX users_registration_step_index ON users (registration_step);
CREATE INDEX users_status_index ON users (status);
CREATE INDEX users_employee_id_index ON users (employee_id);
CREATE INDEX users_cpf_index ON users (cpf);
CREATE UNIQUE INDEX users_email_unique ON users (email);
CREATE INDEX users_is_active_index ON users (is_active);
CREATE INDEX users_role_index ON users (role);
CREATE INDEX users_email_index ON users (email);
CREATE UNIQUE INDEX "users_google_id_unique" on "users" ("google_id");
CREATE UNIQUE INDEX "users_facebook_id_unique" on "users" ("facebook_id");
CREATE UNIQUE INDEX "users_instagram_id_unique" on "users" ("instagram_id");
CREATE TABLE IF NOT EXISTS "permissions" ("id" integer primary key autoincrement not null, "name" varchar not null, "guard_name" varchar not null, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "permissions_name_guard_name_unique" on "permissions" ("name", "guard_name");
CREATE TABLE IF NOT EXISTS "roles" ("id" integer primary key autoincrement not null, "name" varchar not null, "guard_name" varchar not null, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "roles_name_guard_name_unique" on "roles" ("name", "guard_name");
CREATE TABLE IF NOT EXISTS "model_has_permissions" ("permission_id" integer not null, "model_type" varchar not null, "model_id" integer not null, foreign key("permission_id") references "permissions"("id") on delete cascade, primary key ("permission_id", "model_id", "model_type"));
CREATE INDEX "model_has_permissions_model_id_model_type_index" on "model_has_permissions" ("model_id", "model_type");
CREATE TABLE IF NOT EXISTS "model_has_roles" ("role_id" integer not null, "model_type" varchar not null, "model_id" integer not null, foreign key("role_id") references "roles"("id") on delete cascade, primary key ("role_id", "model_id", "model_type"));
CREATE INDEX "model_has_roles_model_id_model_type_index" on "model_has_roles" ("model_id", "model_type");
CREATE TABLE IF NOT EXISTS "role_has_permissions" ("permission_id" integer not null, "role_id" integer not null, foreign key("permission_id") references "permissions"("id") on delete cascade, foreign key("role_id") references "roles"("id") on delete cascade, primary key ("permission_id", "role_id"));
CREATE INDEX "health_questionnaires_progressive_layer_index" on "health_questionnaires" ("progressive_layer");
CREATE INDEX "hq_emergency_detected_timestamp_idx" on "health_questionnaires" ("emergency_detected", "emergency_timestamp");
CREATE INDEX "hq_severity_escalation_idx" on "health_questionnaires" ("severity_level", "escalation_required");
CREATE INDEX "hq_confidence_score_idx" on "health_questionnaires" ("confidence_score");
CREATE INDEX "hq_completion_rate_idx" on "health_questionnaires" ("completion_rate");
CREATE INDEX "health_questionnaires_template_id_index" on "health_questionnaires" ("template_id");
CREATE INDEX "idx_health_beneficiary_status" on "health_questionnaires" ("beneficiary_id", "status");
CREATE INDEX "idx_health_template_completed" on "health_questionnaires" ("template_id", "completed_at");
CREATE INDEX "idx_health_beneficiary_created" on "health_questionnaires" ("beneficiary_id", "created_at");
CREATE INDEX "idx_health_status_saved" on "health_questionnaires" ("status", "last_saved_at");
CREATE INDEX "idx_health_progressive_created" on "health_questionnaires" ("progressive_layer", "created_at");
CREATE INDEX "idx_health_risk_emergency" on "health_questionnaires" ("severity_level", "emergency_detected");
CREATE INDEX "idx_health_status_created" on "health_questionnaires" ("status", "created_at");
CREATE INDEX "idx_health_template_status_completed" on "health_questionnaires" ("template_id", "status", "completed_at");
CREATE INDEX "idx_health_completed_risk" on "health_questionnaires" ("completed_at", "severity_level");
CREATE INDEX "idx_health_beneficiary_completed_status" on "health_questionnaires" ("beneficiary_id", "completed_at", "status");
CREATE INDEX "idx_template_active_type" on "questionnaire_templates" ("is_active", "type");
CREATE INDEX "idx_template_code_active" on "questionnaire_templates" ("code", "is_active");
CREATE INDEX "idx_template_active_created" on "questionnaire_templates" ("is_active", "created_at");
CREATE TABLE IF NOT EXISTS "pathway_experiences" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "pathway" varchar not null, "engagement_score" numeric not null default '0', "completion_rate" numeric not null default '0', "fraud_score" numeric not null default '0', "risk_level" varchar not null default 'low', "user_satisfaction" numeric not null default '0', "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade);
CREATE INDEX "pathway_experiences_beneficiary_id_pathway_index" on "pathway_experiences" ("beneficiary_id", "pathway");
CREATE INDEX "pathway_experiences_risk_level_created_at_index" on "pathway_experiences" ("risk_level", "created_at");
CREATE INDEX "pathway_experiences_engagement_score_index" on "pathway_experiences" ("engagement_score");
CREATE TABLE IF NOT EXISTS "video_sessions" ("id" integer primary key autoincrement not null, "interview_id" integer not null, "session_id" varchar not null, "provider" varchar check ("provider" in ('vonage', 'webrtc', 'teams', 'zoom')) not null default 'vonage', "status" varchar check ("status" in ('created', 'active', 'ended', 'failed')) not null default 'created', "participants" text not null, "settings" text not null, "created_by" integer not null, "recording_archive_id" varchar, "recording_status" varchar check ("recording_status" in ('not_started', 'recording', 'stopped', 'available', 'failed')) not null default 'not_started', "recording_started_at" datetime, "recording_stopped_at" datetime, "recording_duration" integer, "recording_size" integer, "recording_url" varchar, "recording_started_by" integer, "started_at" datetime, "ended_at" datetime, "ended_by" integer, "duration_minutes" integer, "session_analytics" text, "technical_issues" text, "quality_rating" integer, "chat_enabled" tinyint(1) not null default '1', "screen_share_enabled" tinyint(1) not null default '1', "recording_enabled" tinyint(1) not null default '1', "chat_messages" text, "screen_share_sessions" text, "hipaa_compliant" tinyint(1) not null default '1', "encryption_enabled" tinyint(1) not null default '1', "encryption_key_id" varchar, "security_audit_log" text, "bandwidth_used" integer, "storage_used" integer, "session_cost" numeric, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("interview_id") references "interviews"("id") on delete cascade, foreign key("created_by") references "users"("id") on delete cascade, foreign key("recording_started_by") references "users"("id") on delete set null, foreign key("ended_by") references "users"("id") on delete set null);
CREATE INDEX "video_sessions_interview_id_index" on "video_sessions" ("interview_id");
CREATE INDEX "video_sessions_session_id_index" on "video_sessions" ("session_id");
CREATE INDEX "video_sessions_provider_index" on "video_sessions" ("provider");
CREATE INDEX "video_sessions_status_index" on "video_sessions" ("status");
CREATE INDEX "video_sessions_created_by_index" on "video_sessions" ("created_by");
CREATE INDEX "video_sessions_recording_archive_id_index" on "video_sessions" ("recording_archive_id");
CREATE INDEX "video_sessions_recording_status_index" on "video_sessions" ("recording_status");
CREATE INDEX "video_sessions_status_created_at_index" on "video_sessions" ("status", "created_at");
CREATE INDEX "video_sessions_provider_status_index" on "video_sessions" ("provider", "status");
CREATE INDEX "video_sessions_interview_id_status_index" on "video_sessions" ("interview_id", "status");
CREATE INDEX "video_sessions_created_at_ended_at_index" on "video_sessions" ("created_at", "ended_at");
CREATE UNIQUE INDEX "video_sessions_session_id_unique" on "video_sessions" ("session_id");
CREATE TABLE IF NOT EXISTS "admin_roles" ("id" integer primary key autoincrement not null, "name" varchar not null, "display_name" varchar not null, "description" text, "hierarchy_level" integer not null default '0', "is_system_role" tinyint(1) not null default '0', "permissions" text, "metadata" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "admin_roles_hierarchy_level_index" on "admin_roles" ("hierarchy_level");
CREATE INDEX "admin_roles_is_system_role_index" on "admin_roles" ("is_system_role");
CREATE UNIQUE INDEX "admin_roles_name_unique" on "admin_roles" ("name");
CREATE TABLE IF NOT EXISTS "admin_permissions" ("id" integer primary key autoincrement not null, "resource" varchar not null, "action" varchar not null, "scope" varchar not null default 'all', "conditions" text, "display_name" varchar not null, "description" text, "is_sensitive" tinyint(1) not null default '0', "metadata" text, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "admin_permissions_resource_action_scope_unique" on "admin_permissions" ("resource", "action", "scope");
CREATE INDEX "admin_permissions_resource_action_index" on "admin_permissions" ("resource", "action");
CREATE INDEX "admin_permissions_is_sensitive_index" on "admin_permissions" ("is_sensitive");
CREATE TABLE IF NOT EXISTS "admin_role_permissions" ("id" integer primary key autoincrement not null, "admin_role_id" integer not null, "admin_permission_id" integer not null, "conditions" text, "granted_at" datetime, "granted_by" integer, "created_at" datetime, "updated_at" datetime, foreign key("admin_role_id") references "admin_roles"("id") on delete cascade, foreign key("admin_permission_id") references "admin_permissions"("id") on delete cascade, foreign key("granted_by") references "users"("id") on delete set null);
CREATE UNIQUE INDEX "admin_role_permissions_admin_role_id_admin_permission_id_unique" on "admin_role_permissions" ("admin_role_id", "admin_permission_id");
CREATE TABLE IF NOT EXISTS "admin_user_roles" ("id" integer primary key autoincrement not null, "user_id" integer not null, "admin_role_id" integer not null, "assigned_at" datetime not null, "expires_at" datetime, "assigned_by" integer not null, "assignment_reason" text, "is_active" tinyint(1) not null default '1', "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("admin_role_id") references "admin_roles"("id") on delete cascade, foreign key("assigned_by") references "users"("id") on delete cascade);
CREATE UNIQUE INDEX "admin_user_roles_user_id_admin_role_id_unique" on "admin_user_roles" ("user_id", "admin_role_id");
CREATE INDEX "admin_user_roles_user_id_is_active_index" on "admin_user_roles" ("user_id", "is_active");
CREATE INDEX "admin_user_roles_expires_at_index" on "admin_user_roles" ("expires_at");
CREATE TABLE IF NOT EXISTS "admin_sessions" ("id" integer primary key autoincrement not null, "user_id" integer not null, "session_id" varchar not null, "ip_address" varchar not null, "user_agent" varchar not null, "device_info" text, "login_at" datetime not null, "last_activity_at" datetime not null, "logout_at" datetime, "logout_reason" varchar, "is_active" tinyint(1) not null default '1', "security_flags" text, "permissions_snapshot" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE INDEX "admin_sessions_user_id_is_active_index" on "admin_sessions" ("user_id", "is_active");
CREATE INDEX "admin_sessions_last_activity_at_index" on "admin_sessions" ("last_activity_at");
CREATE INDEX "admin_sessions_login_at_index" on "admin_sessions" ("login_at");
CREATE UNIQUE INDEX "admin_sessions_session_id_unique" on "admin_sessions" ("session_id");
CREATE TABLE IF NOT EXISTS "admin_action_logs" ("id" integer primary key autoincrement not null, "user_id" integer not null, "admin_session_id" integer, "action_type" varchar not null, "resource_type" varchar not null, "resource_id" integer, "resource_identifier" varchar, "action_data" text, "old_values" text, "new_values" text, "ip_address" varchar not null, "user_agent" varchar not null, "request_method" varchar not null, "request_url" varchar not null, "request_payload" text, "response_status" integer not null, "execution_time_ms" numeric, "risk_level" varchar not null default 'low', "requires_approval" tinyint(1) not null default '0', "is_approved" tinyint(1), "approved_by" integer, "approved_at" datetime, "approval_notes" text, "security_context" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("admin_session_id") references "admin_sessions"("id") on delete set null, foreign key("approved_by") references "users"("id") on delete set null);
CREATE INDEX "admin_action_logs_user_id_created_at_index" on "admin_action_logs" ("user_id", "created_at");
CREATE INDEX "admin_action_logs_resource_type_resource_id_index" on "admin_action_logs" ("resource_type", "resource_id");
CREATE INDEX "admin_action_logs_action_type_index" on "admin_action_logs" ("action_type");
CREATE INDEX "admin_action_logs_risk_level_index" on "admin_action_logs" ("risk_level");
CREATE INDEX "admin_action_logs_requires_approval_is_approved_index" on "admin_action_logs" ("requires_approval", "is_approved");
CREATE TABLE IF NOT EXISTS "admin_notifications" ("id" integer primary key autoincrement not null, "user_id" integer, "type" varchar not null, "severity" varchar not null, "title" varchar not null, "message" text not null, "data" text, "action_url" varchar, "read_at" datetime, "dismissed_at" datetime, "expires_at" datetime, "is_persistent" tinyint(1) not null default '0', "source" varchar, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE INDEX "admin_notifications_user_id_read_at_index" on "admin_notifications" ("user_id", "read_at");
CREATE INDEX "admin_notifications_severity_created_at_index" on "admin_notifications" ("severity", "created_at");
CREATE INDEX "admin_notifications_expires_at_index" on "admin_notifications" ("expires_at");
CREATE TABLE IF NOT EXISTS "admin_dashboard_widgets" ("id" integer primary key autoincrement not null, "user_id" integer not null, "widget_type" varchar not null, "widget_name" varchar not null, "widget_config" text not null, "position_x" integer not null default '0', "position_y" integer not null default '0', "width" integer not null default '4', "height" integer not null default '3', "is_visible" tinyint(1) not null default '1', "refresh_interval" integer not null default '300', "filters" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE INDEX "admin_dashboard_widgets_user_id_is_visible_index" on "admin_dashboard_widgets" ("user_id", "is_visible");
CREATE UNIQUE INDEX "admin_dashboard_widgets_user_id_widget_name_unique" on "admin_dashboard_widgets" ("user_id", "widget_name");
CREATE TABLE IF NOT EXISTS "admin_system_settings" ("id" integer primary key autoincrement not null, "category" varchar not null, "key" varchar not null, "value" text not null, "type" varchar not null, "description" text, "is_sensitive" tinyint(1) not null default '0', "requires_restart" tinyint(1) not null default '0', "validation_rules" varchar, "last_modified_by" integer, "last_modified_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("last_modified_by") references "users"("id") on delete set null);
CREATE INDEX "admin_system_settings_category_index" on "admin_system_settings" ("category");
CREATE INDEX "admin_system_settings_is_sensitive_index" on "admin_system_settings" ("is_sensitive");
CREATE UNIQUE INDEX "admin_system_settings_key_unique" on "admin_system_settings" ("key");
CREATE TABLE IF NOT EXISTS "admin_system_metrics" ("id" integer primary key autoincrement not null, "metric_type" varchar not null, "metric_name" varchar not null, "aggregation_period" varchar not null, "period_start" datetime not null, "period_end" datetime not null, "value" numeric not null, "unit" varchar, "metadata" text, "dimensions" text, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "idx_metrics_unique" on "admin_system_metrics" ("metric_type", "metric_name", "aggregation_period", "period_start");
CREATE INDEX "admin_system_metrics_metric_type_period_start_index" on "admin_system_metrics" ("metric_type", "period_start");
CREATE INDEX "admin_system_metrics_period_start_index" on "admin_system_metrics" ("period_start");
CREATE TABLE IF NOT EXISTS "admin_user_analytics" ("id" integer primary key autoincrement not null, "date" date not null, "total_users" integer not null default '0', "active_users" integer not null default '0', "new_registrations" integer not null default '0', "completed_registrations" integer not null default '0', "registration_completion_rate" numeric not null default '0', "total_logins" integer not null default '0', "unique_logins" integer not null default '0', "avg_session_duration" numeric not null default '0', "bounced_sessions" integer not null default '0', "bounce_rate" numeric not null default '0', "top_pages" text, "user_flow" text, "device_breakdown" text, "browser_breakdown" text, "location_breakdown" text, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "admin_user_analytics_date_unique" on "admin_user_analytics" ("date");
CREATE INDEX "admin_user_analytics_date_index" on "admin_user_analytics" ("date");
CREATE TABLE IF NOT EXISTS "admin_business_metrics" ("id" integer primary key autoincrement not null, "date" date not null, "total_beneficiaries" integer not null default '0', "active_beneficiaries" integer not null default '0', "new_beneficiaries" integer not null default '0', "documents_uploaded" integer not null default '0', "documents_processed" integer not null default '0', "documents_approved" integer not null default '0', "document_approval_rate" numeric not null default '0', "avg_processing_time" numeric not null default '0', "health_questionnaires_started" integer not null default '0', "health_questionnaires_completed" integer not null default '0', "questionnaire_completion_rate" numeric not null default '0', "interviews_scheduled" integer not null default '0', "interviews_completed" integer not null default '0', "interview_completion_rate" numeric not null default '0', "gamification_badges_earned" integer not null default '0', "avg_engagement_score" numeric not null default '0', "onboarding_funnel" text, "department_breakdown" text, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "admin_business_metrics_date_unique" on "admin_business_metrics" ("date");
CREATE INDEX "admin_business_metrics_date_index" on "admin_business_metrics" ("date");
CREATE TABLE IF NOT EXISTS "admin_performance_metrics" ("id" integer primary key autoincrement not null, "recorded_at" datetime not null, "endpoint" varchar not null, "method" varchar not null, "response_time" numeric not null, "status_code" integer not null, "memory_usage" integer, "cpu_usage" integer, "db_queries" integer, "db_time" numeric, "cache_hits" integer not null default '0', "cache_misses" integer not null default '0', "user_agent" varchar, "ip_address" varchar, "headers" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "admin_performance_metrics_endpoint_recorded_at_index" on "admin_performance_metrics" ("endpoint", "recorded_at");
CREATE INDEX "admin_performance_metrics_recorded_at_index" on "admin_performance_metrics" ("recorded_at");
CREATE INDEX "admin_performance_metrics_status_code_index" on "admin_performance_metrics" ("status_code");
CREATE TABLE IF NOT EXISTS "admin_security_metrics" ("id" integer primary key autoincrement not null, "date" date not null, "failed_login_attempts" integer not null default '0', "blocked_ips" integer not null default '0', "suspicious_activities" integer not null default '0', "rate_limit_hits" integer not null default '0', "csrf_token_failures" integer not null default '0', "permission_violations" integer not null default '0', "data_access_violations" integer not null default '0', "sensitive_data_accesses" integer not null default '0', "threat_indicators" text, "vulnerability_scans" text, "compliance_checks" text, "created_at" datetime, "updated_at" datetime);
CREATE UNIQUE INDEX "admin_security_metrics_date_unique" on "admin_security_metrics" ("date");
CREATE INDEX "admin_security_metrics_date_index" on "admin_security_metrics" ("date");
CREATE TABLE IF NOT EXISTS "admin_custom_reports" ("id" integer primary key autoincrement not null, "name" varchar not null, "description" text, "created_by" integer not null, "report_type" varchar not null, "data_sources" text not null, "filters" text, "columns" text, "grouping" text, "sorting" text, "visualization_config" text, "schedule" varchar, "recipients" text, "is_public" tinyint(1) not null default '0', "is_active" tinyint(1) not null default '1', "last_run_at" datetime, "execution_metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("created_by") references "users"("id") on delete cascade);
CREATE INDEX "admin_custom_reports_created_by_is_active_index" on "admin_custom_reports" ("created_by", "is_active");
CREATE INDEX "admin_custom_reports_is_public_index" on "admin_custom_reports" ("is_public");
CREATE INDEX "admin_custom_reports_last_run_at_index" on "admin_custom_reports" ("last_run_at");
CREATE TABLE IF NOT EXISTS "admin_report_executions" ("id" integer primary key autoincrement not null, "report_id" integer not null, "executed_by" integer, "started_at" datetime not null, "completed_at" datetime, "status" varchar not null, "parameters" text, "records_processed" integer, "error_message" text, "output_format" varchar, "output_path" varchar, "file_size" integer, "execution_time" numeric, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("report_id") references "admin_custom_reports"("id") on delete cascade, foreign key("executed_by") references "users"("id") on delete set null);
CREATE INDEX "admin_report_executions_report_id_started_at_index" on "admin_report_executions" ("report_id", "started_at");
CREATE INDEX "admin_report_executions_status_index" on "admin_report_executions" ("status");
CREATE INDEX "admin_report_executions_started_at_index" on "admin_report_executions" ("started_at");
CREATE TABLE IF NOT EXISTS "admin_alert_rules" ("id" integer primary key autoincrement not null, "name" varchar not null, "description" text, "created_by" integer not null, "metric_source" varchar not null, "condition_type" varchar not null, "conditions" text not null, "severity" varchar not null, "evaluation_frequency" integer not null default '300', "is_active" tinyint(1) not null default '1', "last_triggered_at" datetime, "trigger_count" integer not null default '0', "notification_channels" text not null, "notification_config" text not null, "auto_resolve" tinyint(1) not null default '0', "auto_resolve_after" integer, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("created_by") references "users"("id") on delete cascade);
CREATE INDEX "admin_alert_rules_is_active_evaluation_frequency_index" on "admin_alert_rules" ("is_active", "evaluation_frequency");
CREATE INDEX "admin_alert_rules_last_triggered_at_index" on "admin_alert_rules" ("last_triggered_at");
CREATE TABLE IF NOT EXISTS "admin_alert_instances" ("id" integer primary key autoincrement not null, "alert_rule_id" integer not null, "triggered_at" datetime not null, "resolved_at" datetime, "status" varchar not null, "trigger_data" text not null, "message" text not null, "acknowledged_by" integer, "acknowledged_at" datetime, "acknowledgment_note" text, "notification_log" text, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("alert_rule_id") references "admin_alert_rules"("id") on delete cascade, foreign key("acknowledged_by") references "users"("id") on delete set null);
CREATE INDEX "admin_alert_instances_alert_rule_id_triggered_at_index" on "admin_alert_instances" ("alert_rule_id", "triggered_at");
CREATE INDEX "admin_alert_instances_status_index" on "admin_alert_instances" ("status");
CREATE INDEX "admin_alert_instances_triggered_at_index" on "admin_alert_instances" ("triggered_at");
CREATE TABLE IF NOT EXISTS "ocr_usage_logs" ("id" integer primary key autoincrement not null, "provider" varchar not null, "pages" integer not null default '1', "cost" numeric not null default '0', "user_id" integer, "document_id" integer, "document_type" varchar, "ip_address" varchar, "user_agent" text, "metadata" text, "created_at" datetime, "updated_at" datetime, "estimated_cost" numeric, "accuracy" numeric, "processing_time" integer, foreign key("user_id") references "users"("id") on delete set null, foreign key("document_id") references "documents"("id") on delete set null);
CREATE INDEX "ocr_usage_logs_provider_created_at_index" on "ocr_usage_logs" ("provider", "created_at");
CREATE INDEX "ocr_usage_logs_user_id_created_at_index" on "ocr_usage_logs" ("user_id", "created_at");
CREATE INDEX "ocr_usage_logs_document_type_created_at_index" on "ocr_usage_logs" ("document_type", "created_at");
CREATE INDEX "ocr_usage_logs_provider_index" on "ocr_usage_logs" ("provider");
CREATE INDEX "ocr_usage_logs_user_id_index" on "ocr_usage_logs" ("user_id");
CREATE INDEX "ocr_usage_logs_document_id_index" on "ocr_usage_logs" ("document_id");
CREATE INDEX "ocr_usage_logs_document_type_index" on "ocr_usage_logs" ("document_type");
CREATE INDEX "documents_status_processing_method_index" on "documents" ("status", "processing_method");
CREATE INDEX "documents_validation_status_index" on "documents" ("validation_status");
CREATE INDEX "documents_processing_started_at_processing_completed_at_index" on "documents" ("processing_started_at", "processing_completed_at");
CREATE TABLE IF NOT EXISTS "admin_actions" ("id" integer primary key autoincrement not null, "admin_user_id" integer not null, "target_user_id" integer, "action_type" varchar not null, "action_data" text, "description" text not null, "ip_address" varchar, "user_agent" text, "success" tinyint(1) not null default '1', "error_message" text, "performed_at" datetime not null, "created_at" datetime, "updated_at" datetime, foreign key("admin_user_id") references "users"("id") on delete cascade, foreign key("target_user_id") references "users"("id") on delete set null);
CREATE INDEX "admin_actions_admin_user_id_performed_at_index" on "admin_actions" ("admin_user_id", "performed_at");
CREATE INDEX "admin_actions_action_type_performed_at_index" on "admin_actions" ("action_type", "performed_at");
CREATE INDEX "admin_actions_success_performed_at_index" on "admin_actions" ("success", "performed_at");
CREATE INDEX "admin_actions_action_type_index" on "admin_actions" ("action_type");
CREATE INDEX "admin_actions_success_index" on "admin_actions" ("success");
CREATE INDEX "admin_actions_performed_at_index" on "admin_actions" ("performed_at");
CREATE TABLE interviews (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, beneficiary_id INTEGER NOT NULL, interview_slot_id INTEGER NOT NULL, healthcare_professional_id INTEGER NOT NULL, cancelled_by INTEGER DEFAULT NULL, booking_reference VARCHAR(255) NOT NULL COLLATE "BINARY", status VARCHAR(255) DEFAULT 'scheduled' NOT NULL COLLATE "BINARY", scheduled_at DATETIME NOT NULL, confirmed_at DATETIME DEFAULT NULL, started_at DATETIME DEFAULT NULL, cancelled_at DATETIME DEFAULT NULL, cancellation_reason CLOB DEFAULT NULL COLLATE "BINARY", beneficiary_joined BOOLEAN DEFAULT 0 NOT NULL, professional_joined BOOLEAN DEFAULT 0 NOT NULL, duration_minutes INTEGER DEFAULT NULL, pre_interview_notes CLOB DEFAULT NULL COLLATE "BINARY", interview_notes CLOB DEFAULT NULL COLLATE "BINARY", post_interview_notes CLOB DEFAULT NULL COLLATE "BINARY", discussion_topics CLOB DEFAULT NULL COLLATE "BINARY", recommendations CLOB DEFAULT NULL COLLATE "BINARY", follow_up_actions CLOB DEFAULT NULL COLLATE "BINARY", next_appointment_date DATE DEFAULT NULL, beneficiary_rating INTEGER DEFAULT NULL, beneficiary_feedback CLOB DEFAULT NULL COLLATE "BINARY", professional_rating INTEGER DEFAULT NULL, requires_follow_up BOOLEAN DEFAULT 0 NOT NULL, documents_reviewed BOOLEAN DEFAULT 0 NOT NULL, reviewed_documents CLOB DEFAULT NULL COLLATE "BINARY", recording_url VARCHAR(255) DEFAULT NULL COLLATE "BINARY", technical_issues CLOB DEFAULT NULL COLLATE "BINARY", meeting_platform VARCHAR(255) DEFAULT NULL COLLATE "BINARY", meeting_id VARCHAR(255) DEFAULT NULL COLLATE "BINARY", created_at DATETIME DEFAULT NULL, updated_at DATETIME DEFAULT NULL, deleted_at DATETIME DEFAULT NULL, "appointment_type_id" integer, "recurring_appointment_id" integer, "is_telemedicine" tinyint(1) not null default '1', "telemedicine_setup_checklist" text, "setup_checklist_completed" tinyint(1) not null default '0', "setup_completed_at" datetime, "vital_signs_data" text, "prescription_reviewed" tinyint(1) not null default '0', "prescription_changes" text, "requires_in_person_followup" tinyint(1) not null default '0', "suggested_followup_date" date, "consultation_outcome" varchar check ("consultation_outcome" in ('completed_successfully', 'completed_with_followup', 'requires_in_person', 'technical_issues', 'patient_no_show', 'provider_unavailable')), "patient_satisfaction_score" integer, "patient_satisfaction_feedback" text, "consultation_cost" numeric, "insurance_covered" tinyint(1) not null default '0', "insurance_claim_id" varchar, "company_id" integer, FOREIGN KEY (beneficiary_id) REFERENCES beneficiaries (id) ON UPDATE NO ACTION ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE, FOREIGN KEY (interview_slot_id) REFERENCES interview_slots (id) ON UPDATE NO ACTION ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE, FOREIGN KEY (healthcare_professional_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE, FOREIGN KEY (cancelled_by) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE SET NULL NOT DEFERRABLE INITIALLY IMMEDIATE);
CREATE UNIQUE INDEX interviews_booking_reference_unique ON interviews (booking_reference);
CREATE INDEX interviews_healthcare_professional_id_scheduled_at_index ON interviews (healthcare_professional_id, scheduled_at);
CREATE INDEX interviews_beneficiary_id_status_index ON interviews (beneficiary_id, status);
CREATE INDEX interviews_scheduled_at_index ON interviews (scheduled_at);
CREATE INDEX interviews_status_index ON interviews (status);
CREATE INDEX interviews_booking_reference_index ON interviews (booking_reference);
CREATE INDEX interviews_healthcare_professional_id_index ON interviews (healthcare_professional_id);
CREATE INDEX interviews_interview_slot_id_index ON interviews (interview_slot_id);
CREATE INDEX interviews_beneficiary_id_index ON interviews (beneficiary_id);
CREATE INDEX IDX_3A75268248CCCEFB ON interviews (cancelled_by);
CREATE INDEX "interviews_interview_type_index" on "interviews" ("interview_type");
CREATE INDEX "interviews_meeting_type_index" on "interviews" ("meeting_type");
CREATE INDEX "interviews_reschedule_count_index" on "interviews" ("reschedule_count");
CREATE INDEX "interviews_booked_at_index" on "interviews" ("booked_at");
CREATE INDEX "ocr_usage_logs_cost_index" on "ocr_usage_logs" ("cost");
CREATE TABLE IF NOT EXISTS "ocr_processing_metrics" ("id" integer primary key autoincrement not null, "document_id" varchar, "file_path" varchar not null, "document_type" varchar not null, "processing_method" varchar not null, "processing_time" integer not null, "confidence_score" numeric not null, "quality_score" numeric not null, "file_size" integer not null, "pages_processed" integer not null default '1', "features_used" text, "forms_detected" integer not null default '0', "tables_detected" integer not null default '0', "signatures_detected" integer not null default '0', "success" tinyint(1) not null default '1', "error_message" text, "quality_metrics" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "ocr_processing_metrics_processing_method_created_at_index" on "ocr_processing_metrics" ("processing_method", "created_at");
CREATE INDEX "ocr_processing_metrics_document_type_created_at_index" on "ocr_processing_metrics" ("document_type", "created_at");
CREATE INDEX "ocr_processing_metrics_confidence_score_index" on "ocr_processing_metrics" ("confidence_score");
CREATE INDEX "ocr_processing_metrics_processing_time_index" on "ocr_processing_metrics" ("processing_time");
CREATE TABLE IF NOT EXISTS "ocr_cost_predictions" ("id" integer primary key autoincrement not null, "document_type" varchar not null, "features" text not null, "estimated_cost" numeric not null, "actual_cost" numeric, "accuracy_rate" numeric, "sample_size" integer not null default '1', "created_at" datetime, "updated_at" datetime);
CREATE INDEX "ocr_cost_predictions_document_type_created_at_index" on "ocr_cost_predictions" ("document_type", "created_at");
CREATE TABLE IF NOT EXISTS "ocr_alerts" ("id" integer primary key autoincrement not null, "type" varchar not null, "severity" varchar not null, "metric" varchar, "value" numeric, "threshold" numeric, "message" text not null, "metadata" text, "resolved" tinyint(1) not null default '0', "resolved_at" datetime, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "ocr_alerts_type_created_at_index" on "ocr_alerts" ("type", "created_at");
CREATE INDEX "ocr_alerts_severity_resolved_index" on "ocr_alerts" ("severity", "resolved");
CREATE INDEX "interview_slots_timezone_index" on "interview_slots" ("timezone");
CREATE INDEX "interview_slots_specialization_required_index" on "interview_slots" ("specialization_required");
CREATE INDEX "beneficiaries_timezone_index" on "beneficiaries" ("timezone");
CREATE INDEX "ocr_usage_logs_estimated_cost_index" on "ocr_usage_logs" ("estimated_cost");
CREATE INDEX "ocr_usage_logs_accuracy_index" on "ocr_usage_logs" ("accuracy");
CREATE TABLE IF NOT EXISTS "performance_reports" ("id" integer primary key autoincrement not null, "period" varchar not null, "generated_at" datetime not null, "performance" text not null, "recommendations" text, "alerts" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "performance_reports_period_index" on "performance_reports" ("period");
CREATE INDEX "performance_reports_generated_at_index" on "performance_reports" ("generated_at");
CREATE TABLE IF NOT EXISTS "ocr_monitoring_events" ("id" integer primary key autoincrement not null, "event_type" varchar not null, "service" varchar not null default 'textract', "event_data" text, "occurred_at" datetime not null, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "ocr_monitoring_events_event_type_index" on "ocr_monitoring_events" ("event_type");
CREATE INDEX "ocr_monitoring_events_service_index" on "ocr_monitoring_events" ("service");
CREATE INDEX "ocr_monitoring_events_occurred_at_index" on "ocr_monitoring_events" ("occurred_at");
CREATE TABLE IF NOT EXISTS "video_session_analytics" ("id" integer primary key autoincrement not null, "video_session_id" integer not null, "analytics_data" text not null, "engagement_score" numeric, "compliance_status" text, "quality_metrics" text, "participant_analytics" text, "technical_performance" text, "cost_analysis" text, "analyzed_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("video_session_id") references "video_sessions"("id") on delete cascade);
CREATE INDEX "video_session_analytics_video_session_id_index" on "video_session_analytics" ("video_session_id");
CREATE INDEX "video_session_analytics_engagement_score_index" on "video_session_analytics" ("engagement_score");
CREATE INDEX "video_session_analytics_created_at_index" on "video_session_analytics" ("created_at");
CREATE TABLE IF NOT EXISTS "telemedicine_appointment_types" ("id" integer primary key autoincrement not null, "name" varchar not null, "slug" varchar not null, "description" text, "duration_minutes" integer not null default '30', "preparation_time_minutes" integer not null default '15', "follow_up_required" tinyint(1) not null default '0', "base_points" integer not null default '50', "completion_badge_id" integer, "streak_multiplier" numeric not null default '1', "requires_pre_screening" tinyint(1) not null default '0', "max_reschedules" integer not null default '2', "advance_booking_hours" integer not null default '24', "base_price" numeric, "requires_insurance" tinyint(1) not null default '0', "specialty_required" varchar, "reminder_schedule" text, "preparation_checklist" text, "post_appointment_actions" text, "is_active" tinyint(1) not null default '1', "sort_order" integer not null default '0', "created_at" datetime, "updated_at" datetime, foreign key("completion_badge_id") references "gamification_badges"("id") on delete set null);
CREATE INDEX "telemedicine_appointment_types_slug_index" on "telemedicine_appointment_types" ("slug");
CREATE INDEX "telemedicine_appointment_types_is_active_index" on "telemedicine_appointment_types" ("is_active");
CREATE INDEX "telemedicine_appointment_types_specialty_required_index" on "telemedicine_appointment_types" ("specialty_required");
CREATE INDEX "telemedicine_appointment_types_sort_order_index" on "telemedicine_appointment_types" ("sort_order");
CREATE UNIQUE INDEX "telemedicine_appointment_types_slug_unique" on "telemedicine_appointment_types" ("slug");
CREATE TABLE IF NOT EXISTS "telemedicine_appointments" ("id" integer primary key autoincrement not null, "appointment_reference" varchar not null, "beneficiary_id" integer not null, "healthcare_professional_id" integer not null, "appointment_type_id" integer not null, "legacy_interview_id" integer, "scheduled_at" datetime not null, "duration_minutes" integer not null, "timezone" varchar not null default 'America/Sao_Paulo', "status" varchar check ("status" in ('scheduled', 'confirmed', 'preparation', 'waiting_room', 'in_progress', 'completed', 'cancelled', 'no_show', 'rescheduled', 'follow_up_required')) not null default 'scheduled', "booked_at" datetime not null, "confirmed_at" datetime, "preparation_started_at" datetime, "joined_waiting_room_at" datetime, "session_started_at" datetime, "session_ended_at" datetime, "points_earned" integer not null default '0', "badges_awarded" text, "completion_streak" integer not null default '0', "punctuality_bonus_earned" tinyint(1) not null default '0', "preparation_bonus_earned" tinyint(1) not null default '0', "chief_complaint" text, "symptoms_checklist" text, "vitals_recorded" text, "medications_reviewed" tinyint(1) not null default '0', "care_plan_updates" text, "preparation_completed" tinyint(1) not null default '0', "preparation_score" integer, "session_quality_rating" integer, "technical_issues" text, "engagement_score" integer, "follow_up_required" tinyint(1) not null default '0', "follow_up_date" date, "follow_up_type" varchar, "care_plan_updated" tinyint(1) not null default '0', "video_session_id" varchar, "recording_url" varchar, "prescription_issued" tinyint(1) not null default '0', "lab_orders_issued" tinyint(1) not null default '0', "cancelled_at" datetime, "cancelled_by" integer, "cancellation_reason" text, "reschedule_count" integer not null default '0', "pre_appointment_notes" text, "session_notes" text, "post_appointment_notes" text, "clinical_recommendations" text, "beneficiary_rating" integer, "beneficiary_feedback" text, "professional_rating" integer, "professional_feedback" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("healthcare_professional_id") references "users"("id") on delete cascade, foreign key("appointment_type_id") references "telemedicine_appointment_types"("id") on delete cascade, foreign key("legacy_interview_id") references "interviews"("id") on delete set null, foreign key("cancelled_by") references "users"("id") on delete set null);
CREATE INDEX "telemedicine_appointments_beneficiary_id_status_index" on "telemedicine_appointments" ("beneficiary_id", "status");
CREATE INDEX "telemedicine_appointments_healthcare_professional_id_scheduled_at_index" on "telemedicine_appointments" ("healthcare_professional_id", "scheduled_at");
CREATE INDEX "telemedicine_appointments_appointment_type_id_index" on "telemedicine_appointments" ("appointment_type_id");
CREATE INDEX "telemedicine_appointments_status_scheduled_at_index" on "telemedicine_appointments" ("status", "scheduled_at");
CREATE INDEX "telemedicine_appointments_appointment_reference_index" on "telemedicine_appointments" ("appointment_reference");
CREATE INDEX "telemedicine_appointments_scheduled_at_index" on "telemedicine_appointments" ("scheduled_at");
CREATE INDEX "telemedicine_appointments_legacy_interview_id_index" on "telemedicine_appointments" ("legacy_interview_id");
CREATE INDEX "telemedicine_appointments_beneficiary_id_completion_streak_index" on "telemedicine_appointments" ("beneficiary_id", "completion_streak");
CREATE INDEX "telemedicine_appointments_points_earned_index" on "telemedicine_appointments" ("points_earned");
CREATE UNIQUE INDEX "telemedicine_appointments_appointment_reference_unique" on "telemedicine_appointments" ("appointment_reference");
CREATE TABLE IF NOT EXISTS "health_checkins" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "telemedicine_appointment_id" integer, "checkin_type" varchar check ("checkin_type" in ('pre_appointment', 'daily', 'weekly', 'symptom_tracker', 'medication_compliance', 'post_appointment', 'care_plan_update')) not null, "symptoms" text, "vitals" text, "pain_level" integer, "mood_rating" integer, "energy_level" integer, "sleep_hours" numeric, "stress_level" integer, "medications_taken" text, "side_effects" text, "compliance_percentage" numeric, "medication_notes" text, "exercise_minutes" integer, "nutrition_data" text, "water_intake_glasses" integer, "alcohol_consumed" tinyint(1) not null default '0', "tobacco_used" tinyint(1) not null default '0', "points_earned" integer not null default '0', "streak_day" integer not null default '1', "consistency_bonus" tinyint(1) not null default '0', "completeness_bonus" tinyint(1) not null default '0', "completion_time_seconds" integer, "accuracy_score" integer, "completeness_percentage" numeric not null default '100', "care_plan_goals_progress" text, "triggers_alert" tinyint(1) not null default '0', "alert_reason" text, "requires_professional_review" tinyint(1) not null default '0', "reviewed_at" datetime, "reviewed_by" integer, "professional_notes" text, "completed_at" datetime not null, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("telemedicine_appointment_id") references "telemedicine_appointments"("id") on delete set null, foreign key("reviewed_by") references "users"("id") on delete set null);
CREATE INDEX "health_checkins_beneficiary_id_checkin_type_index" on "health_checkins" ("beneficiary_id", "checkin_type");
CREATE INDEX "health_checkins_telemedicine_appointment_id_index" on "health_checkins" ("telemedicine_appointment_id");
CREATE INDEX "health_checkins_completed_at_index" on "health_checkins" ("completed_at");
CREATE INDEX "health_checkins_beneficiary_id_completed_at_index" on "health_checkins" ("beneficiary_id", "completed_at");
CREATE INDEX "health_checkins_checkin_type_completed_at_index" on "health_checkins" ("checkin_type", "completed_at");
CREATE INDEX "health_checkins_requires_professional_review_index" on "health_checkins" ("requires_professional_review");
CREATE INDEX "health_checkins_beneficiary_id_streak_day_index" on "health_checkins" ("beneficiary_id", "streak_day");
CREATE INDEX "health_checkins_points_earned_index" on "health_checkins" ("points_earned");
CREATE TABLE IF NOT EXISTS "telemedicine_achievements" ("id" integer primary key autoincrement not null, "name" varchar not null, "slug" varchar not null, "description" text not null, "category" varchar check ("category" in ('appointment_completion', 'health_monitoring', 'engagement', 'clinical_outcomes', 'consistency', 'milestones', 'social')) not null, "icon_name" varchar not null, "icon_color" varchar not null default '#3B82F6', "badge_design" text, "criteria" text not null, "points_value" integer not null default '0', "rarity" varchar check ("rarity" in ('common', 'uncommon', 'rare', 'epic', 'legendary')) not null default 'common', "max_earnable" integer not null default '1', "is_active" tinyint(1) not null default '1', "is_secret" tinyint(1) not null default '0', "available_from" datetime, "available_until" datetime, "encourages_behavior" varchar, "clinical_benefit" text, "difficulty_level" integer not null default '1', "creates_badge" tinyint(1) not null default '1', "gamification_badge_id" integer, "sort_order" integer not null default '0', "created_at" datetime, "updated_at" datetime, foreign key("gamification_badge_id") references "gamification_badges"("id") on delete set null);
CREATE INDEX "telemedicine_achievements_slug_index" on "telemedicine_achievements" ("slug");
CREATE INDEX "telemedicine_achievements_category_index" on "telemedicine_achievements" ("category");
CREATE INDEX "telemedicine_achievements_is_active_index" on "telemedicine_achievements" ("is_active");
CREATE INDEX "telemedicine_achievements_rarity_index" on "telemedicine_achievements" ("rarity");
CREATE INDEX "telemedicine_achievements_category_difficulty_level_index" on "telemedicine_achievements" ("category", "difficulty_level");
CREATE INDEX "telemedicine_achievements_gamification_badge_id_index" on "telemedicine_achievements" ("gamification_badge_id");
CREATE UNIQUE INDEX "telemedicine_achievements_slug_unique" on "telemedicine_achievements" ("slug");
CREATE TABLE IF NOT EXISTS "appointment_waitlists" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "appointment_type_id" integer not null, "healthcare_professional_id" integer, "preferred_date_range" text not null, "preferred_times" text not null, "max_advance_notice_hours" integer not null default '24', "priority_score" integer not null default '100', "medical_urgency" varchar check ("medical_urgency" in ('routine', 'urgent', 'very_urgent')) not null default 'routine', "urgency_reason" text, "points_bonus_for_flexibility" integer not null default '10', "flexibility_bonus_earned" tinyint(1) not null default '0', "status" varchar check ("status" in ('active', 'notified', 'booked', 'expired', 'cancelled')) not null default 'active', "expires_at" datetime not null, "last_notification_sent_at" datetime, "notification_count" integer not null default '0', "matching_criteria" text, "match_attempts" integer not null default '0', "last_match_attempt_at" datetime, "resulting_appointment_id" integer, "converted_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("appointment_type_id") references "telemedicine_appointment_types"("id") on delete cascade, foreign key("healthcare_professional_id") references "users"("id") on delete cascade, foreign key("resulting_appointment_id") references "telemedicine_appointments"("id") on delete set null);
CREATE INDEX "idx_waitlist_status_type_expires" on "appointment_waitlists" ("status", "appointment_type_id", "expires_at");
CREATE INDEX "idx_waitlist_beneficiary" on "appointment_waitlists" ("beneficiary_id");
CREATE INDEX "idx_waitlist_professional" on "appointment_waitlists" ("healthcare_professional_id");
CREATE INDEX "idx_waitlist_urgency_priority" on "appointment_waitlists" ("medical_urgency", "priority_score");
CREATE INDEX "idx_waitlist_status_expires" on "appointment_waitlists" ("status", "expires_at");
CREATE TABLE IF NOT EXISTS "patient_care_plans" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "healthcare_professional_id" integer not null, "name" varchar not null, "description" text, "clinical_condition" varchar, "start_date" date not null, "target_end_date" date, "health_goals" text not null, "success_metrics" text not null, "milestone_schedule" text, "total_possible_points" integer not null default '0', "milestone_rewards" text, "current_points_earned" integer not null default '0', "status" varchar check ("status" in ('active', 'paused', 'completed', 'discontinued')) not null default 'active', "completion_percentage" numeric not null default '0', "progress_data" text, "required_appointments" integer not null default '0', "completed_appointments" integer not null default '0', "appointment_schedule" text, "monitoring_parameters" text, "alert_thresholds" text, "requires_daily_checkin" tinyint(1) not null default '0', "requires_weekly_checkin" tinyint(1) not null default '0', "last_updated_at" datetime not null default CURRENT_TIMESTAMP, "next_review_date" date, "last_review_notes" text, "review_count" integer not null default '0', "outcome_measures" text, "baseline_measurements" text, "latest_measurements" text, "care_team_members" text, "emergency_contacts" text, "overall_adherence_rate" numeric, "adherence_breakdown" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("healthcare_professional_id") references "users"("id") on delete cascade);
CREATE INDEX "patient_care_plans_beneficiary_id_status_index" on "patient_care_plans" ("beneficiary_id", "status");
CREATE INDEX "patient_care_plans_healthcare_professional_id_index" on "patient_care_plans" ("healthcare_professional_id");
CREATE INDEX "patient_care_plans_status_next_review_date_index" on "patient_care_plans" ("status", "next_review_date");
CREATE INDEX "patient_care_plans_completion_percentage_index" on "patient_care_plans" ("completion_percentage");
CREATE INDEX "patient_care_plans_start_date_target_end_date_index" on "patient_care_plans" ("start_date", "target_end_date");
CREATE TABLE IF NOT EXISTS "telemedicine_availability_templates" ("id" integer primary key autoincrement not null, "healthcare_professional_id" integer not null, "name" varchar not null, "weekly_schedule" text not null, "appointment_types_allowed" text not null, "is_default" tinyint(1) not null default '0', "is_active" tinyint(1) not null default '1', "created_at" datetime, "updated_at" datetime, foreign key("healthcare_professional_id") references "users"("id") on delete cascade);
CREATE INDEX "telemedicine_availability_templates_healthcare_professional_id_is_active_index" on "telemedicine_availability_templates" ("healthcare_professional_id", "is_active");
CREATE INDEX "telemedicine_availability_templates_healthcare_professional_id_is_default_index" on "telemedicine_availability_templates" ("healthcare_professional_id", "is_default");
CREATE TABLE IF NOT EXISTS "telemedicine_recurring_appointments" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "healthcare_professional_id" integer not null, "appointment_type_id" integer not null, "recurrence_pattern" varchar not null, "recurrence_interval" integer not null default '1', "recurrence_days" text, "preferred_start_time" time not null, "preferred_end_time" time not null, "series_start_date" date not null, "series_end_date" date, "max_occurrences" integer, "created_appointments_count" integer not null default '0', "skip_dates" text, "status" varchar check ("status" in ('active', 'paused', 'completed', 'cancelled')) not null default 'active', "notes" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("healthcare_professional_id") references "users"("id") on delete cascade, foreign key("appointment_type_id") references "telemedicine_appointment_types"("id") on delete cascade);
CREATE INDEX "telemedicine_recurring_appointments_beneficiary_id_status_index" on "telemedicine_recurring_appointments" ("beneficiary_id", "status");
CREATE INDEX "telemedicine_recurring_appointments_healthcare_professional_id_status_index" on "telemedicine_recurring_appointments" ("healthcare_professional_id", "status");
CREATE INDEX "telemedicine_recurring_appointments_series_start_date_series_end_date_index" on "telemedicine_recurring_appointments" ("series_start_date", "series_end_date");
CREATE TABLE IF NOT EXISTS "telemedicine_waitlist" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "appointment_type_id" integer not null, "preferred_professional_id" integer, "preferred_time_slots" text not null, "preferred_days" text not null, "earliest_date" date not null, "latest_date" date not null, "urgency_level" varchar check ("urgency_level" in ('routine', 'urgent', 'emergency')) not null default 'routine', "special_requirements" text, "accepts_any_provider" tinyint(1) not null default '0', "status" varchar check ("status" in ('waiting', 'matched', 'expired', 'cancelled')) not null default 'waiting', "matched_at" datetime, "matched_appointment_id" integer, "expires_at" datetime not null, "notification_attempts" integer not null default '0', "last_notification_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("appointment_type_id") references "telemedicine_appointment_types"("id") on delete cascade, foreign key("preferred_professional_id") references "users"("id") on delete set null, foreign key("matched_appointment_id") references "interviews"("id") on delete set null);
CREATE INDEX "telemedicine_waitlist_status_urgency_level_earliest_date_index" on "telemedicine_waitlist" ("status", "urgency_level", "earliest_date");
CREATE INDEX "telemedicine_waitlist_beneficiary_id_status_index" on "telemedicine_waitlist" ("beneficiary_id", "status");
CREATE INDEX "telemedicine_waitlist_expires_at_index" on "telemedicine_waitlist" ("expires_at");
CREATE INDEX "interviews_is_telemedicine_status_index" on "interviews" ("is_telemedicine", "status");
CREATE INDEX "interviews_appointment_type_id_scheduled_at_index" on "interviews" ("appointment_type_id", "scheduled_at");
CREATE INDEX "interviews_consultation_outcome_scheduled_at_index" on "interviews" ("consultation_outcome", "scheduled_at");
CREATE INDEX "interviews_requires_in_person_followup_suggested_followup_date_index" on "interviews" ("requires_in_person_followup", "suggested_followup_date");
CREATE INDEX "interview_slots_is_telemedicine_enabled_is_available_index" on "interview_slots" ("is_telemedicine_enabled", "is_available");
CREATE INDEX "interview_slots_allows_urgent_booking_date_index" on "interview_slots" ("allows_urgent_booking", "date");
CREATE TABLE IF NOT EXISTS "telemedicine_session_metrics" ("id" integer primary key autoincrement not null, "interview_id" integer not null, "video_session_id" integer, "connection_quality_data" text not null, "audio_quality_score" integer, "video_quality_score" integer, "overall_technical_score" integer, "technical_issues_log" text, "session_interruptions_count" integer not null default '0', "total_interruption_duration_seconds" integer not null default '0', "backup_communication_used" tinyint(1) not null default '0', "primary_device_type" varchar, "browser_type" varchar, "operating_system" varchar, "feature_usage" text, "session_completed_successfully" tinyint(1) not null default '1', "technical_feedback" text, "created_at" datetime, "updated_at" datetime, foreign key("interview_id") references "interviews"("id") on delete cascade, foreign key("video_session_id") references "video_sessions"("id") on delete set null);
CREATE INDEX "telemedicine_session_metrics_interview_id_index" on "telemedicine_session_metrics" ("interview_id");
CREATE INDEX "telemedicine_session_metrics_session_completed_successfully_created_at_index" on "telemedicine_session_metrics" ("session_completed_successfully", "created_at");
CREATE INDEX "telemedicine_session_metrics_overall_technical_score_created_at_index" on "telemedicine_session_metrics" ("overall_technical_score", "created_at");
CREATE TABLE IF NOT EXISTS "telemedicine_notifications" ("id" integer primary key autoincrement not null, "interview_id" integer not null, "recipient_user_id" integer not null, "notification_type" varchar check ("notification_type" in ('appointment_confirmation', 'appointment_reminder_24h', 'appointment_reminder_1h', 'setup_checklist_reminder', 'technical_check_reminder', 'appointment_cancelled', 'appointment_rescheduled', 'followup_required', 'waitlist_match_found', 'prescription_ready')) not null, "delivery_method" varchar not null, "status" varchar check ("status" in ('pending', 'sent', 'delivered', 'failed', 'expired')) not null default 'pending', "scheduled_for" datetime not null, "sent_at" datetime, "delivered_at" datetime, "message_data" text not null, "failure_reason" text, "retry_count" integer not null default '0', "expires_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("interview_id") references "interviews"("id") on delete cascade, foreign key("recipient_user_id") references "users"("id") on delete cascade);
CREATE INDEX "telemedicine_notifications_status_scheduled_for_index" on "telemedicine_notifications" ("status", "scheduled_for");
CREATE INDEX "telemedicine_notifications_interview_id_notification_type_index" on "telemedicine_notifications" ("interview_id", "notification_type");
CREATE INDEX "telemedicine_notifications_recipient_user_id_status_index" on "telemedicine_notifications" ("recipient_user_id", "status");
CREATE TABLE IF NOT EXISTS "telemedicine_gamification_rules" ("id" integer primary key autoincrement not null, "rule_name" varchar not null, "trigger_event" varchar not null, "conditions" text not null, "points_awarded" integer not null default '0', "badge_slug" varchar, "achievement_data" text, "is_active" tinyint(1) not null default '1', "description" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "telemedicine_gamification_rules_trigger_event_is_active_index" on "telemedicine_gamification_rules" ("trigger_event", "is_active");
CREATE INDEX "telemedicine_gamification_rules_is_active_index" on "telemedicine_gamification_rules" ("is_active");
CREATE TABLE IF NOT EXISTS "rewards" ("id" integer primary key autoincrement not null, "code" varchar not null, "name" varchar not null, "description" text not null, "benefits" text not null, "points_required" integer not null, "type" varchar check ("type" in ('badge', 'discount', 'service_upgrade', 'physical_item', 'digital_item', 'feature_unlock', 'priority_access')) not null, "delivery_config" text, "icon" varchar, "color_scheme" varchar, "is_premium" tinyint(1) not null default '0', "is_active" tinyint(1) not null default '1', "is_limited" tinyint(1) not null default '0', "quantity_available" integer, "quantity_claimed" integer not null default '0', "valid_from" date, "valid_until" date, "sort_order" integer not null default '0', "created_at" datetime, "updated_at" datetime);
CREATE INDEX "rewards_code_index" on "rewards" ("code");
CREATE INDEX "rewards_points_required_index" on "rewards" ("points_required");
CREATE INDEX "rewards_is_active_index" on "rewards" ("is_active");
CREATE UNIQUE INDEX "rewards_code_unique" on "rewards" ("code");
CREATE TABLE IF NOT EXISTS "user_rewards" ("id" integer primary key autoincrement not null, "user_id" integer not null, "reward_id" integer not null, "status" varchar check ("status" in ('unlocked', 'claimed', 'delivered', 'expired', 'revoked')) not null default 'unlocked', "unlocked_at" datetime, "claimed_at" datetime, "delivered_at" datetime, "expires_at" datetime, "delivery_details" text, "usage_data" text, "redemption_code" varchar, "notes" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete cascade);
CREATE UNIQUE INDEX "user_rewards_user_id_reward_id_unique" on "user_rewards" ("user_id", "reward_id");
CREATE INDEX "user_rewards_status_index" on "user_rewards" ("status");
CREATE INDEX "user_rewards_redemption_code_index" on "user_rewards" ("redemption_code");
CREATE UNIQUE INDEX "user_rewards_redemption_code_unique" on "user_rewards" ("redemption_code");
CREATE TABLE IF NOT EXISTS "reward_transactions" ("id" integer primary key autoincrement not null, "user_id" integer not null, "reward_id" integer, "action" varchar check ("action" in ('unlock', 'claim', 'deliver', 'expire', 'revoke', 'redeem')) not null, "points_at_time" integer not null, "metadata" text, "ip_address" varchar, "user_agent" varchar, "created_at" datetime not null, foreign key("user_id") references "users"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "reward_transactions_user_id_created_at_index" on "reward_transactions" ("user_id", "created_at");
CREATE INDEX "reward_transactions_action_index" on "reward_transactions" ("action");
CREATE TABLE IF NOT EXISTS "reward_delivery_queue" ("id" integer primary key autoincrement not null, "user_reward_id" integer not null, "status" varchar check ("status" in ('pending', 'processing', 'completed', 'failed')) not null default 'pending', "attempts" integer not null default '0', "delivery_payload" text, "error_message" text, "scheduled_at" datetime, "processed_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("user_reward_id") references "user_rewards"("id") on delete cascade);
CREATE INDEX "reward_delivery_queue_status_scheduled_at_index" on "reward_delivery_queue" ("status", "scheduled_at");
CREATE TABLE IF NOT EXISTS "service_upgrades" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "reward_id" integer, "service_type" varchar not null, "upgrade_type" varchar not null, "features" text, "activated_at" datetime not null, "expires_at" datetime, "status" varchar check ("status" in ('active', 'expired', 'cancelled')) not null default 'active', "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "service_upgrades_beneficiary_id_status_index" on "service_upgrades" ("beneficiary_id", "status");
CREATE INDEX "service_upgrades_service_type_index" on "service_upgrades" ("service_type");
CREATE TABLE IF NOT EXISTS "beneficiary_service_access" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "service_type" varchar not null, "access_level" varchar not null default 'basic', "features" text, "granted_at" datetime not null, "expires_at" datetime, "source" varchar, "source_reference" varchar, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade);
CREATE UNIQUE INDEX "beneficiary_service_access_beneficiary_id_service_type_unique" on "beneficiary_service_access" ("beneficiary_id", "service_type");
CREATE INDEX "beneficiary_service_access_access_level_index" on "beneficiary_service_access" ("access_level");
CREATE TABLE IF NOT EXISTS "digital_assets" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "reward_id" integer, "asset_type" varchar not null, "asset_name" varchar not null, "asset_path" varchar, "access_url" varchar, "download_token" varchar not null, "download_count" integer not null default '0', "last_accessed_at" datetime, "expires_at" datetime, "regenerated_at" datetime, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "digital_assets_download_token_index" on "digital_assets" ("download_token");
CREATE INDEX "digital_assets_beneficiary_id_asset_type_index" on "digital_assets" ("beneficiary_id", "asset_type");
CREATE UNIQUE INDEX "digital_assets_download_token_unique" on "digital_assets" ("download_token");
CREATE TABLE IF NOT EXISTS "discount_codes" ("id" integer primary key autoincrement not null, "code" varchar not null, "user_id" integer not null, "reward_id" integer, "discount_type" varchar check ("discount_type" in ('percentage', 'fixed')) not null, "discount_value" numeric not null, "applicable_to" varchar not null default 'all', "minimum_amount" numeric not null default '0', "valid_from" datetime not null, "valid_until" datetime not null, "max_uses" integer not null default '1', "used_count" integer not null default '0', "last_used_at" datetime, "usage_details" text, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "discount_codes_code_index" on "discount_codes" ("code");
CREATE INDEX "discount_codes_user_id_valid_until_index" on "discount_codes" ("user_id", "valid_until");
CREATE UNIQUE INDEX "discount_codes_code_unique" on "discount_codes" ("code");
CREATE TABLE IF NOT EXISTS "shipping_orders" ("id" integer primary key autoincrement not null, "user_id" integer not null, "beneficiary_id" integer not null, "reward_id" integer, "item_name" varchar not null, "item_description" text, "shipping_address" text not null, "status" varchar check ("status" in ('pending', 'processing', 'shipped', 'delivered', 'cancelled')) not null default 'pending', "tracking_number" varchar, "carrier" varchar, "shipped_at" datetime, "delivered_at" datetime, "estimated_delivery" datetime, "shipping_updates" text, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "shipping_orders_user_id_status_index" on "shipping_orders" ("user_id", "status");
CREATE INDEX "shipping_orders_tracking_number_index" on "shipping_orders" ("tracking_number");
CREATE TABLE IF NOT EXISTS "feature_access" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "feature_key" varchar not null, "enabled" tinyint(1) not null default '1', "unlocked_at" datetime not null, "unlocked_by" varchar, "expires_at" datetime, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade);
CREATE UNIQUE INDEX "feature_access_beneficiary_id_feature_key_unique" on "feature_access" ("beneficiary_id", "feature_key");
CREATE INDEX "feature_access_enabled_expires_at_index" on "feature_access" ("enabled", "expires_at");
CREATE TABLE IF NOT EXISTS "priority_access" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "reward_id" integer, "access_type" varchar not null default 'general', "priority_level" varchar check ("priority_level" in ('standard', 'high', 'vip', 'platinum')) not null default 'high', "services" text, "granted_at" datetime not null, "expires_at" datetime, "is_active" tinyint(1) not null default '1', "usage_log" text, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade, foreign key("reward_id") references "rewards"("id") on delete set null);
CREATE INDEX "priority_access_beneficiary_id_is_active_index" on "priority_access" ("beneficiary_id", "is_active");
CREATE INDEX "priority_access_priority_level_expires_at_index" on "priority_access" ("priority_level", "expires_at");
CREATE TABLE IF NOT EXISTS "generated_reports" ("id" integer primary key autoincrement not null, "beneficiary_id" integer not null, "report_type" varchar not null, "report_name" varchar not null, "file_path" varchar, "access_token" varchar not null, "report_data" text, "status" varchar check ("status" in ('pending', 'generating', 'completed', 'failed')) not null default 'pending', "generated_at" datetime, "expires_at" datetime, "metadata" text, "created_at" datetime, "updated_at" datetime, foreign key("beneficiary_id") references "beneficiaries"("id") on delete cascade);
CREATE INDEX "generated_reports_beneficiary_id_report_type_index" on "generated_reports" ("beneficiary_id", "report_type");
CREATE INDEX "generated_reports_access_token_index" on "generated_reports" ("access_token");
CREATE UNIQUE INDEX "generated_reports_access_token_unique" on "generated_reports" ("access_token");
CREATE TABLE IF NOT EXISTS "webhook_configurations" ("id" integer primary key autoincrement not null, "webhook_id" varchar not null, "health_plan_id" varchar not null, "endpoint" varchar not null, "events" text not null, "secret" text not null, "retry_policy" text, "status" varchar check ("status" in ('active', 'inactive', 'suspended')) not null default 'active', "last_triggered_at" datetime, "trigger_count" integer not null default '0', "failure_count" integer not null default '0', "created_at" datetime, "updated_at" datetime);
CREATE INDEX "webhook_configurations_health_plan_id_status_index" on "webhook_configurations" ("health_plan_id", "status");
CREATE INDEX "webhook_configurations_status_index" on "webhook_configurations" ("status");
CREATE UNIQUE INDEX "webhook_configurations_webhook_id_unique" on "webhook_configurations" ("webhook_id");
CREATE INDEX "webhook_configurations_health_plan_id_index" on "webhook_configurations" ("health_plan_id");
CREATE TABLE IF NOT EXISTS "webhook_deliveries" ("id" integer primary key autoincrement not null, "webhook_id" varchar not null, "alert_id" integer, "endpoint" varchar not null, "status_code" integer, "success" tinyint(1) not null default '0', "attempt_number" integer not null default '1', "response_body" text, "error_message" text, "delivered_at" datetime, "created_at" datetime, "updated_at" datetime, foreign key("alert_id") references "clinical_alerts"("id") on delete cascade);
CREATE INDEX "webhook_deliveries_webhook_id_success_index" on "webhook_deliveries" ("webhook_id", "success");
CREATE INDEX "webhook_deliveries_delivered_at_index" on "webhook_deliveries" ("delivered_at");
CREATE TABLE IF NOT EXISTS "health_plan_integrations" ("id" integer primary key autoincrement not null, "plan_id" varchar not null, "plan_name" varchar not null, "contact_email" varchar not null, "contact_phone" varchar, "api_access_enabled" tinyint(1) not null default '0', "api_key" varchar, "api_secret" varchar, "allowed_endpoints" text, "ip_whitelist" text, "rate_limit" integer not null default '1000', "status" varchar check ("status" in ('active', 'inactive', 'suspended', 'pending')) not null default 'pending', "last_api_access" datetime, "total_api_calls" integer not null default '0', "subscription_start" date, "subscription_end" date, "features_enabled" text, "data_sharing_agreement" text, "created_at" datetime, "updated_at" datetime);
CREATE INDEX "health_plan_integrations_plan_id_index" on "health_plan_integrations" ("plan_id");
CREATE INDEX "health_plan_integrations_status_index" on "health_plan_integrations" ("status");
CREATE INDEX "health_plan_integrations_status_api_access_enabled_index" on "health_plan_integrations" ("status", "api_access_enabled");
CREATE UNIQUE INDEX "health_plan_integrations_plan_id_unique" on "health_plan_integrations" ("plan_id");
CREATE TABLE IF NOT EXISTS "oauth_health_plan_tokens" ("id" integer primary key autoincrement not null, "health_plan_id" varchar not null, "access_token" varchar not null, "refresh_token" varchar, "token_type" varchar not null default 'Bearer', "scopes" text, "expires_at" datetime not null, "created_at" datetime, "updated_at" datetime, foreign key("health_plan_id") references "health_plan_integrations"("plan_id") on delete cascade);
CREATE INDEX "oauth_health_plan_tokens_health_plan_id_index" on "oauth_health_plan_tokens" ("health_plan_id");
CREATE INDEX "oauth_health_plan_tokens_expires_at_index" on "oauth_health_plan_tokens" ("expires_at");
CREATE INDEX "clinical_alerts_webhook_notification_status_index" on "clinical_alerts" ("webhook_notification_status");
CREATE INDEX "clinical_alerts_prediction_confidence_index" on "clinical_alerts" ("prediction_confidence");
CREATE TABLE gamification_badges (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name VARCHAR(255) NOT NULL, slug VARCHAR(255) NOT NULL, description CLOB NOT NULL, icon_name VARCHAR(255) NOT NULL, icon_color VARCHAR(255) DEFAULT '#3B82F6' NOT NULL, category VARCHAR(50) DEFAULT 'engagement' NOT NULL, rarity VARCHAR(255) DEFAULT 'common' NOT NULL, points_value INTEGER DEFAULT 0 NOT NULL, criteria CLOB DEFAULT NULL, is_active BOOLEAN DEFAULT 1 NOT NULL, is_secret BOOLEAN DEFAULT 0 NOT NULL, sort_order INTEGER DEFAULT 0 NOT NULL, max_per_user INTEGER DEFAULT 1 NOT NULL, available_from DATETIME DEFAULT NULL, available_until DATETIME DEFAULT NULL, created_at DATETIME DEFAULT NULL, updated_at DATETIME DEFAULT NULL);
CREATE UNIQUE INDEX gamification_badges_slug_unique ON gamification_badges (slug);
CREATE INDEX gamification_badges_rarity_index ON gamification_badges (rarity);
CREATE INDEX gamification_badges_is_active_index ON gamification_badges (is_active);
CREATE INDEX gamification_badges_category_index ON gamification_badges (category);
CREATE INDEX gamification_badges_slug_index ON gamification_badges (slug);
CREATE INDEX "idx_health_questionnaires_beneficiary_completed" on "health_questionnaires" ("beneficiary_id", "completed_at");
CREATE INDEX "idx_documents_beneficiary_status" on "documents" ("beneficiary_id", "status");
CREATE INDEX "idx_gamification_progress_beneficiary_updated" on "gamification_progress" ("beneficiary_id", "updated_at");
CREATE INDEX "idx_health_questionnaires_user_status" on "health_questionnaires" ("user_id", "status");
CREATE INDEX "idx_health_questionnaires_status_created" on "health_questionnaires" ("status", "created_at");
CREATE INDEX "idx_health_questionnaires_draft_updated" on "health_questionnaires" ("is_draft", "updated_at");
CREATE INDEX "idx_beneficiaries_user_status" on "beneficiaries" ("user_id", "status");
CREATE INDEX "idx_beneficiaries_email" on "beneficiaries" ("email");
CREATE INDEX "idx_beneficiaries_created" on "beneficiaries" ("created_at");
CREATE INDEX "idx_users_email_created" on "users" ("email", "created_at");
CREATE INDEX "idx_users_created" on "users" ("created_at");
CREATE INDEX "idx_health_created_status_type" on "health_questionnaires" ("created_at", "status", "questionnaire_type");
CREATE INDEX "idx_health_beneficiary_status_created_complex" on "health_questionnaires" ("beneficiary_id", "status", "created_at");
CREATE INDEX "idx_health_risk_assessment" on "health_questionnaires" ("status", "severity_level", "emergency_detected");
CREATE INDEX "idx_health_template_completion" on "health_questionnaires" ("template_id", "status", "completed_at");
CREATE INDEX "idx_health_last_saved_status" on "health_questionnaires" ("last_saved_at", "status");
CREATE INDEX "idx_documents_user_created" on "documents" ("user_id", "created_at");
CREATE INDEX "idx_documents_beneficiary_created" on "documents" ("beneficiary_id", "created_at");
CREATE INDEX "idx_documents_user_beneficiary" on "documents" ("user_id", "beneficiary_id");
CREATE INDEX "idx_audit_logs_user_created" on "audit_logs" ("user_id", "created_at");
CREATE INDEX "idx_audit_logs_action_created" on "audit_logs" ("action", "created_at");
CREATE INDEX "idx_interviews_beneficiary_slot" on "interviews" ("beneficiary_id", "interview_slot_id");
CREATE INDEX "idx_interviews_status_scheduled" on "interviews" ("status", "scheduled_at");
CREATE INDEX "idx_beneficiaries_company_status" on "beneficiaries" ("company_id", "status");
CREATE INDEX "idx_beneficiaries_email_created_enhanced" on "beneficiaries" ("email", "created_at");
CREATE INDEX "idx_beneficiaries_user_created" on "beneficiaries" ("user_id", "created_at");
CREATE INDEX "idx_users_role_active" on "users" ("role", "is_active");
CREATE INDEX "idx_users_verified_created" on "users" ("email_verified_at", "created_at");
CREATE INDEX "idx_gamification_beneficiary_updated" on "gamification_progress" ("beneficiary_id", "updated_at");
CREATE INDEX "idx_notifications_notifiable_read" on "notifications" ("notifiable_id", "notifiable_type", "read_at");
CREATE INDEX "idx_ocr_logs_user_created" on "ocr_usage_logs" ("user_id", "created_at");
CREATE INDEX "idx_video_sessions_status_started" on "video_sessions" ("status", "started_at");
CREATE INDEX "idx_clinical_alerts_resolved_created" on "clinical_alerts" ("resolved_at", "created_at");
CREATE INDEX "idx_users_email_active" on "users" ("email", "is_active");
CREATE INDEX "idx_beneficiaries_user_id" on "beneficiaries" ("user_id");
CREATE INDEX "idx_health_status_created_new" on "health_questionnaires" ("status", "created_at");
CREATE INDEX "idx_interviews_beneficiary_scheduled" on "interviews" ("beneficiary_id", "scheduled_at");
CREATE INDEX "idx_beneficiaries_onboarding_created" on "beneficiaries" ("onboarding_status", "created_at");
CREATE INDEX "idx_health_beneficiary_type_completed" on "health_questionnaires" ("beneficiary_id", "questionnaire_type", "completed_at");
CREATE INDEX "idx_documents_type_status" on "documents" ("document_type", "status");
CREATE INDEX "idx_interviews_professional_scheduled_status" on "interviews" ("healthcare_professional_id", "scheduled_at", "status");
CREATE INDEX "users_email_is_active_index" on "users" ("email", "is_active");
CREATE INDEX "users_cpf_is_active_index" on "users" ("cpf", "is_active");
CREATE INDEX "users_last_login_at_index" on "users" ("last_login_at");
CREATE INDEX "personal_access_tokens_tokenable_expires_index" on "personal_access_tokens" ("tokenable_id", "tokenable_type", "expires_at");
CREATE VIEW unified_user_roles AS
            SELECT 
                u.id as user_id,
                u.email,
                u.role as database_role,
                CASE 
                    WHEN u.role = 'super_admin' THEN 100
                    WHEN u.role = 'company_admin' THEN 50
                    WHEN u.role = 'beneficiary' THEN 10
                    ELSE 0
                END as database_hierarchy_level,
                CASE
                    WHEN u.role IN ('super_admin', 'company_admin') THEN 1 ELSE 0
                END as has_database_admin
            FROM users u
/* unified_user_roles(user_id,email,database_role,database_hierarchy_level,has_database_admin) */;
CREATE INDEX "idx_leaderboard_composite" on "gamification_progress" ("total_points", "current_level", "engagement_score");
CREATE INDEX "idx_progress_beneficiary" on "gamification_progress" ("beneficiary_id");
CREATE INDEX "idx_beneficiary_badges_composite" on "beneficiary_badges" ("beneficiary_id", "earned_at");
CREATE INDEX "idx_badges_earned_at" on "beneficiary_badges" ("earned_at");
CREATE INDEX "idx_level_number" on "gamification_levels" ("level_number");
CREATE INDEX "idx_level_covering" on "gamification_levels" ("level_number", "name");
CREATE INDEX "idx_badge_visibility" on "gamification_badges" ("is_active", "is_secret");
CREATE INDEX "idx_badge_slug" on "gamification_badges" ("slug");
CREATE TABLE sqlite_stat1(tbl,idx,stat);
CREATE TABLE sqlite_stat4(tbl,idx,neq,nlt,ndlt,sample);
CREATE TABLE IF NOT EXISTS "cache" ("key" varchar not null, "value" text not null, "expiration" integer not null, primary key ("key"));
CREATE TABLE IF NOT EXISTS "cache_locks" ("key" varchar not null, "owner" varchar not null, "expiration" integer not null, primary key ("key"));
CREATE INDEX "users_company_id_index" on "users" ("company_id");
CREATE INDEX "health_questionnaires_company_id_index" on "health_questionnaires" ("company_id");
CREATE INDEX "documents_company_id_index" on "documents" ("company_id");
CREATE INDEX "interviews_company_id_index" on "interviews" ("company_id");
CREATE INDEX "audit_logs_company_id_index" on "audit_logs" ("company_id");
CREATE INDEX "gamification_progress_company_id_index" on "gamification_progress" ("company_id");
CREATE INDEX "notifications_company_id_index" on "notifications" ("company_id");
CREATE INDEX "users_company_id_email_index" on "users" ("company_id", "email");
CREATE INDEX "users_company_id_role_index" on "users" ("company_id", "role");
CREATE INDEX "health_questionnaires_company_id_beneficiary_id_index" on "health_questionnaires" ("company_id", "beneficiary_id");
CREATE INDEX "health_questionnaires_company_id_status_index" on "health_questionnaires" ("company_id", "status");
CREATE INDEX "documents_company_id_beneficiary_id_index" on "documents" ("company_id", "beneficiary_id");
CREATE INDEX "documents_company_id_status_index" on "documents" ("company_id", "status");
CREATE INDEX "beneficiaries_company_id_user_id_index" on "beneficiaries" ("company_id", "user_id");
CREATE INDEX "beneficiaries_company_id_onboarding_status_index" on "beneficiaries" ("company_id", "onboarding_status");
INSERT INTO migrations VALUES(1,'2019_12_14_000001_create_personal_access_tokens_table',1);
INSERT INTO migrations VALUES(2,'2024_01_01_000001_create_users_table',1);
INSERT INTO migrations VALUES(3,'2024_01_01_000002_create_companies_table',1);
INSERT INTO migrations VALUES(4,'2024_01_01_000003_create_beneficiaries_table',1);
INSERT INTO migrations VALUES(5,'2024_01_01_000004_create_gamification_progress_table',1);
INSERT INTO migrations VALUES(6,'2024_01_01_000005_create_health_questionnaires_table',1);
INSERT INTO migrations VALUES(7,'2024_01_01_000006_create_documents_table',1);
INSERT INTO migrations VALUES(8,'2024_01_01_000007_create_interview_slots_table',1);
INSERT INTO migrations VALUES(9,'2024_01_01_000008_create_interviews_table',1);
INSERT INTO migrations VALUES(10,'2024_01_01_000009_create_audit_logs_table',1);
INSERT INTO migrations VALUES(11,'2024_01_01_000010_create_gamification_badges_table',1);
INSERT INTO migrations VALUES(12,'2024_01_01_000011_create_gamification_levels_table',1);
INSERT INTO migrations VALUES(13,'2024_01_01_000012_create_beneficiary_badges_table',1);
INSERT INTO migrations VALUES(14,'2024_01_01_000013_create_notifications_table',1);
INSERT INTO migrations VALUES(15,'2024_01_01_000014_create_document_types_table',1);
INSERT INTO migrations VALUES(16,'2024_01_01_000015_create_health_categories_table',1);
INSERT INTO migrations VALUES(17,'2024_01_01_000016_create_questionnaire_templates_table',1);
INSERT INTO migrations VALUES(18,'2024_01_01_000017_add_authentication_fields_to_users_table',1);
INSERT INTO migrations VALUES(19,'2024_01_20_000001_add_fraud_detection_fields_to_health_questionnaires',1);
INSERT INTO migrations VALUES(20,'2025_01_05_000001_create_clinical_alerts_table',1);
INSERT INTO migrations VALUES(21,'2025_01_05_000002_create_clinical_reports_table',1);
INSERT INTO migrations VALUES(22,'2025_01_05_000003_create_alert_workflows_table',1);
INSERT INTO migrations VALUES(23,'2025_01_05_000004_add_processing_fields_to_health_questionnaires',1);
INSERT INTO migrations VALUES(24,'2025_01_12_000001_add_cpf_to_seeded_users',1);
INSERT INTO migrations VALUES(25,'2025_07_12_103509_add_social_login_fields_to_users_table',1);
INSERT INTO migrations VALUES(26,'2025_07_12_113859_create_permission_tables',1);
INSERT INTO migrations VALUES(27,'2025_07_12_171817_add_progressive_screening_fields_to_health_questionnaires',1);
INSERT INTO migrations VALUES(28,'2025_07_12_210000_add_clinical_decision_support_to_health_questionnaires',1);
INSERT INTO migrations VALUES(29,'2025_07_13_214903_add_template_id_to_health_questionnaires_table',1);
INSERT INTO migrations VALUES(30,'2025_07_13_214950_fix_health_questionnaires_schema',1);
INSERT INTO migrations VALUES(31,'2025_07_13_215100_add_remaining_fields_to_health_questionnaires',1);
INSERT INTO migrations VALUES(32,'2025_07_13_add_performance_indexes_to_health_questionnaires',1);
INSERT INTO migrations VALUES(33,'2025_07_13_create_pathway_experiences_table',1);
INSERT INTO migrations VALUES(34,'2025_07_23_200000_create_video_sessions_table',1);
INSERT INTO migrations VALUES(35,'2025_07_23_200001_create_admin_roles_permissions',1);
INSERT INTO migrations VALUES(36,'2025_07_23_200002_create_admin_analytics_tables',1);
INSERT INTO migrations VALUES(37,'2025_07_23_201600_create_ocr_usage_logs_table',1);
INSERT INTO migrations VALUES(38,'2025_07_23_201700_add_enhanced_ocr_fields_to_documents_table',1);
INSERT INTO migrations VALUES(39,'2025_07_23_202329_create_admin_actions_table',1);
INSERT INTO migrations VALUES(40,'2025_07_29_000001_add_missing_fields_to_interviews_table',1);
INSERT INTO migrations VALUES(41,'2025_07_29_000001_add_ocr_optimization_fields',1);
INSERT INTO migrations VALUES(42,'2025_07_29_000002_add_missing_fields_to_interview_slots_table',1);
INSERT INTO migrations VALUES(43,'2025_07_29_000002_add_processing_options_to_documents_table',1);
INSERT INTO migrations VALUES(44,'2025_07_29_000003_add_notification_preferences_to_beneficiaries_table',1);
INSERT INTO migrations VALUES(45,'2025_07_29_032735_add_cost_optimization_fields_to_ocr_usage_logs_table',1);
INSERT INTO migrations VALUES(46,'2025_07_29_create_ocr_monitoring_tables',1);
INSERT INTO migrations VALUES(47,'2025_07_30_000001_create_video_session_analytics_table',1);
INSERT INTO migrations VALUES(48,'2025_08_03_000001_create_telemedicine_appointment_types_table',1);
INSERT INTO migrations VALUES(49,'2025_08_03_000002_create_telemedicine_appointments_table',1);
INSERT INTO migrations VALUES(50,'2025_08_03_000003_create_health_checkins_table',1);
INSERT INTO migrations VALUES(51,'2025_08_03_000004_create_telemedicine_achievements_table',1);
INSERT INTO migrations VALUES(52,'2025_08_03_000005_create_appointment_waitlists_table',1);
INSERT INTO migrations VALUES(53,'2025_08_03_000006_create_patient_care_plans_table',1);
INSERT INTO migrations VALUES(54,'2025_08_03_210000_create_telemedicine_scheduling_enhancements',1);
INSERT INTO migrations VALUES(55,'2025_08_05_200000_create_rewards_system_tables',1);
INSERT INTO migrations VALUES(56,'2025_08_05_210000_create_reward_delivery_tables',1);
INSERT INTO migrations VALUES(57,'2025_08_07_000001_create_webhook_configurations_table',1);
INSERT INTO migrations VALUES(58,'2025_08_07_000002_create_health_plan_integrations_table',1);
INSERT INTO migrations VALUES(59,'2025_08_07_000003_add_ml_fields_to_clinical_alerts',1);
INSERT INTO migrations VALUES(60,'2025_08_12_012112_fix_gamification_badges_category_length',1);
INSERT INTO migrations VALUES(61,'2025_08_13_005028_add_performance_indexes_to_tables',1);
INSERT INTO migrations VALUES(62,'2025_08_13_120000_add_performance_indexes',1);
INSERT INTO migrations VALUES(63,'2025_08_16_133023_add_lgpd_consent_explicit_to_users_table',1);
INSERT INTO migrations VALUES(64,'2025_08_22_152130_add_critical_performance_indexes',1);
INSERT INTO migrations VALUES(65,'2025_08_22_200000_add_critical_missing_indexes',1);
INSERT INTO migrations VALUES(66,'2025_08_25_140314_fix_database_tables_missing',1);
INSERT INTO migrations VALUES(67,'2025_01_02_000001_sync_spatie_roles_to_admin_system',2);
INSERT INTO migrations VALUES(68,'2025_01_03_000001_consolidate_user_roles_unified_system',2);
INSERT INTO migrations VALUES(69,'2025_08_26_180000_add_gamification_performance_indexes',2);
INSERT INTO migrations VALUES(70,'2025_08_26_193033_create_cache_table',2);
INSERT INTO migrations VALUES(71,'2025_09_02_000001_add_tenant_isolation_company_id',2);
