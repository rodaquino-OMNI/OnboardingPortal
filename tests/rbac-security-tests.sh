#!/bin/bash

# RBAC Security Test Suite
# Tests for Role-Based Access Control vulnerabilities
# Generated by Claude Code Security Audit

echo "üîí RBAC Security Test Suite"
echo "=========================="
echo "Testing OnboardingPortal for authorization vulnerabilities..."
echo ""

# Configuration
BASE_URL="http://localhost:8000"
API_BASE="$BASE_URL/api"

# Test Results
TOTAL_TESTS=0
FAILED_TESTS=0
CRITICAL_ISSUES=0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_test() {
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo "[$TOTAL_TESTS] Testing: $1"
}

log_pass() {
    echo -e "  ‚úÖ ${GREEN}PASS${NC}: $1"
}

log_fail() {
    echo -e "  ‚ùå ${RED}FAIL${NC}: $1"
    FAILED_TESTS=$((FAILED_TESTS + 1))
}

log_critical() {
    echo -e "  üö® ${RED}CRITICAL${NC}: $1"
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
    FAILED_TESTS=$((FAILED_TESTS + 1))
}

log_warning() {
    echo -e "  ‚ö†Ô∏è  ${YELLOW}WARNING${NC}: $1"
}

# Test 1: Unauthenticated Access to Protected Endpoints
test_unauthenticated_access() {
    log_test "Unauthenticated access to protected endpoints"
    
    # Test metrics endpoint (should be protected)
    response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/metrics")
    if [ "$response" = "200" ]; then
        log_critical "Metrics endpoint accessible without authentication (HTTP $response)"
    else
        log_pass "Metrics endpoint properly protected (HTTP $response)"
    fi
    
    # Test user profile endpoint
    response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/auth/user")
    if [ "$response" = "401" ]; then
        log_pass "User profile endpoint properly protected (HTTP $response)"
    else
        log_fail "User profile endpoint security issue (HTTP $response)"
    fi
    
    # Test health questionnaire endpoint
    response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/health-questionnaires/1/progress")
    if [ "$response" = "401" ]; then
        log_pass "Health questionnaire endpoint properly protected (HTTP $response)"
    else
        log_fail "Health questionnaire endpoint security issue (HTTP $response)"
    fi
}

# Test 2: Invalid Token Handling
test_invalid_tokens() {
    log_test "Invalid token handling"
    
    # Test with completely invalid token
    response=$(curl -s -H "Authorization: Bearer invalid_token_12345" \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/user")
    
    if [ "$response" = "401" ]; then
        log_pass "Invalid token properly rejected (HTTP $response)"
    else
        log_fail "Invalid token not properly handled (HTTP $response)"
    fi
    
    # Test with malformed token
    response=$(curl -s -H "Authorization: Bearer" \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/user")
    
    if [ "$response" = "401" ]; then
        log_pass "Malformed token properly rejected (HTTP $response)"
    else
        log_fail "Malformed token not properly handled (HTTP $response)"
    fi
}

# Test 3: SQL Injection in Authentication
test_sql_injection() {
    log_test "SQL injection in authentication endpoints"
    
    # Test SQL injection in login
    response=$(curl -s -X POST \
                   -H "Content-Type: application/json" \
                   -d '{"login":"admin'\''OR 1=1--","password":"anything"}' \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/login")
    
    if [ "$response" = "422" ] || [ "$response" = "401" ]; then
        log_pass "SQL injection in login properly blocked (HTTP $response)"
    else
        log_critical "Potential SQL injection vulnerability in login (HTTP $response)"
    fi
    
    # Test SQL injection in email check
    response=$(curl -s -X POST \
                   -H "Content-Type: application/json" \
                   -d '{"email":"test'\''OR 1=1--"}' \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/check-email")
    
    if [ "$response" = "422" ] || [ "$response" = "400" ]; then
        log_pass "SQL injection in email check properly blocked (HTTP $response)"
    else
        log_warning "Potential SQL injection in email check (HTTP $response)"
    fi
}

# Test 4: Cross-Site Scripting (XSS) Prevention
test_xss_prevention() {
    log_test "XSS prevention in input fields"
    
    # Test XSS in registration
    xss_payload='<script>alert("XSS")</script>'
    response=$(curl -s -X POST \
                   -H "Content-Type: application/json" \
                   -d "{\"fullName\":\"$xss_payload\",\"email\":\"test@example.com\",\"cpf\":\"12345678900\",\"password\":\"Test@123\"}" \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/register")
    
    if [ "$response" = "422" ] || [ "$response" = "400" ]; then
        log_pass "XSS payload in registration properly blocked (HTTP $response)"
    else
        log_warning "Potential XSS vulnerability in registration (HTTP $response)"
    fi
}

# Test 5: Rate Limiting
test_rate_limiting() {
    log_test "Rate limiting on authentication endpoints"
    
    echo "  Testing login rate limiting (this may take a moment)..."
    
    # Send multiple rapid requests
    for i in {1..20}; do
        curl -s -X POST \
             -H "Content-Type: application/json" \
             -d '{"login":"nonexistent@example.com","password":"wrongpassword"}' \
             -o /dev/null \
             "$API_BASE/auth/login" &
    done
    wait
    
    # Check if rate limiting kicks in
    response=$(curl -s -X POST \
                   -H "Content-Type: application/json" \
                   -d '{"login":"test@example.com","password":"test"}' \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/auth/login")
    
    if [ "$response" = "429" ]; then
        log_pass "Rate limiting is active (HTTP $response)"
    else
        log_warning "Rate limiting may not be properly configured (HTTP $response)"
    fi
}

# Test 6: Health Check Endpoint Security
test_health_endpoints() {
    log_test "Health check endpoint security"
    
    endpoints=("health" "health/live" "health/ready" "health/status")
    
    for endpoint in "${endpoints[@]}"; do
        response=$(curl -s "$API_BASE/$endpoint" | jq -r '.checks.database.host // "not_found"' 2>/dev/null)
        
        if [ "$response" != "not_found" ] && [ "$response" != "" ]; then
            log_warning "Health endpoint /$endpoint may expose sensitive information: $response"
        else
            log_pass "Health endpoint /$endpoint appears safe"
        fi
    done
}

# Test 7: Admin Endpoint Access Without Proper Roles
test_admin_endpoints() {
    log_test "Admin endpoint access control"
    
    # These endpoints should require admin privileges
    admin_endpoints=(
        "admin/dashboard"
        "admin/users"
        "admin/analytics"
        "admin/security-audit"
        "admin/system-settings"
    )
    
    for endpoint in "${admin_endpoints[@]}"; do
        response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/$endpoint")
        
        if [ "$response" = "401" ] || [ "$response" = "403" ] || [ "$response" = "404" ]; then
            log_pass "Admin endpoint /$endpoint properly protected (HTTP $response)"
        else
            log_fail "Admin endpoint /$endpoint may be accessible (HTTP $response)"
        fi
    done
}

# Test 8: File Upload Security
test_file_upload_security() {
    log_test "File upload security"
    
    # Test upload without authentication
    response=$(curl -s -X POST \
                   -F "file=@/etc/passwd" \
                   -o /dev/null -w "%{http_code}" \
                   "$API_BASE/documents/upload" 2>/dev/null || echo "000")
    
    if [ "$response" = "401" ] || [ "$response" = "403" ] || [ "$response" = "404" ]; then
        log_pass "File upload properly protected (HTTP $response)"
    elif [ "$response" = "000" ]; then
        log_pass "File upload endpoint not accessible"
    else
        log_warning "File upload endpoint may have security issues (HTTP $response)"
    fi
}

# Test 9: CORS Configuration
test_cors_configuration() {
    log_test "CORS configuration security"
    
    response=$(curl -s -H "Origin: https://evil.com" \
                   -H "Access-Control-Request-Method: POST" \
                   -H "Access-Control-Request-Headers: Content-Type" \
                   -X OPTIONS \
                   "$API_BASE/auth/login" | grep -i "access-control-allow-origin" || echo "not_found")
    
    if echo "$response" | grep -q "\*"; then
        log_critical "CORS allows all origins (*) - potential security risk"
    elif [ "$response" = "not_found" ]; then
        log_pass "CORS properly configured - no wildcard origins detected"
    else
        log_pass "CORS configuration appears secure"
    fi
}

# Test 10: Information Disclosure
test_information_disclosure() {
    log_test "Information disclosure in error messages"
    
    # Test 404 responses for information leakage
    response=$(curl -s "$API_BASE/nonexistent-endpoint" | grep -i "laravel\|debug\|stack\|trace" || echo "clean")
    
    if [ "$response" != "clean" ]; then
        log_warning "Error responses may contain sensitive debug information"
    else
        log_pass "Error responses appear clean"
    fi
    
    # Test malformed JSON
    response=$(curl -s -X POST \
                   -H "Content-Type: application/json" \
                   -d '{"invalid json"}' \
                   "$API_BASE/auth/login" | grep -i "syntax\|parse\|line\|column" || echo "clean")
    
    if [ "$response" != "clean" ]; then
        log_warning "JSON parsing errors may expose server details"
    else
        log_pass "JSON parsing errors handled securely"
    fi
}

# Main test execution
main() {
    echo "Starting security tests..."
    echo ""
    
    test_unauthenticated_access
    echo ""
    
    test_invalid_tokens
    echo ""
    
    test_sql_injection
    echo ""
    
    test_xss_prevention
    echo ""
    
    test_rate_limiting
    echo ""
    
    test_health_endpoints
    echo ""
    
    test_admin_endpoints
    echo ""
    
    test_file_upload_security
    echo ""
    
    test_cors_configuration
    echo ""
    
    test_information_disclosure
    echo ""
    
    # Results summary
    echo "üîí SECURITY TEST RESULTS"
    echo "========================"
    echo "Total Tests: $TOTAL_TESTS"
    echo "Failed Tests: $FAILED_TESTS"
    echo "Critical Issues: $CRITICAL_ISSUES"
    echo ""
    
    if [ $CRITICAL_ISSUES -gt 0 ]; then
        echo -e "${RED}üö® CRITICAL: $CRITICAL_ISSUES critical security issues found!${NC}"
        echo "Immediate action required before production deployment."
    elif [ $FAILED_TESTS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  WARNING: $FAILED_TESTS security issues found.${NC}"
        echo "Review and fix before production deployment."
    else
        echo -e "${GREEN}‚úÖ SUCCESS: All security tests passed!${NC}"
    fi
    
    echo ""
    echo "For detailed analysis, see: docs/rbac-matrix.md"
    
    # Exit with appropriate code
    if [ $CRITICAL_ISSUES -gt 0 ]; then
        exit 2
    elif [ $FAILED_TESTS -gt 0 ]; then
        exit 1
    else
        exit 0
    fi
}

# Check if server is running
if ! curl -s "$BASE_URL/api/health" > /dev/null 2>&1; then
    echo "‚ùå Error: Server not running at $BASE_URL"
    echo "Please start the backend server and try again."
    exit 1
fi

# Run tests
main