name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests & Analysis
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, redis
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: omni-portal/backend/vendor
          key: composer-${{ hashFiles('omni-portal/backend/composer.lock') }}
          restore-keys: composer-

      - name: Install backend dependencies
        working-directory: omni-portal/backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy environment file
        working-directory: omni-portal/backend
        run: |
          cp .env.example .env
          php artisan key:generate
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Run database migrations
        working-directory: omni-portal/backend
        run: php artisan migrate --force

      - name: Run database seeders
        working-directory: omni-portal/backend
        run: php artisan db:seed --force

      - name: PHP Code Sniffer
        working-directory: omni-portal/backend
        run: vendor/bin/phpcs --standard=PSR12 app/ --ignore=vendor/

      - name: PHPStan Static Analysis
        working-directory: omni-portal/backend
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse app --level=5 --memory-limit=1G

      - name: Run PHPUnit tests
        working-directory: omni-portal/backend
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-html --testdox
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: omni-portal/backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Archive backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            omni-portal/backend/coverage-html/
            omni-portal/backend/coverage.xml

  # Frontend Testing
  frontend-test:
    name: Frontend Tests & Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: omni-portal/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: omni-portal/frontend
        run: npm ci

      - name: Run ESLint (Strict)
        working-directory: omni-portal/frontend
        run: npm run lint:strict

      - name: Run TypeScript check (Strict)
        working-directory: omni-portal/frontend
        run: npm run type-check:strict

      - name: Run Jest tests
        working-directory: omni-portal/frontend
        run: npm run test:ci

      - name: Run accessibility tests
        working-directory: omni-portal/frontend
        run: |
          npm run build
          npm run test:a11y:only

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: omni-portal/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Archive frontend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            omni-portal/frontend/coverage/
            omni-portal/frontend/.next/

  # E2E Testing
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: omni-portal/frontend/package-lock.json

      - name: Install dependencies
        working-directory: omni-portal/frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: omni-portal/frontend
        run: npx playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          cd omni-portal
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost/api/health; do sleep 2; done'

      - name: Run Playwright tests
        working-directory: omni-portal/frontend
        run: npm run test:e2e

      - name: Archive E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            omni-portal/frontend/test-results/
            omni-portal/frontend/playwright-report/

      - name: Stop services
        if: always()
        run: |
          cd omni-portal
          docker-compose down

  # Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan - Backend
        uses: snyk/actions/php@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=omni-portal/backend/composer.lock --severity-threshold=high

      - name: Run Snyk security scan - Frontend
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=omni-portal/frontend/package.json --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: php, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Docker Build
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./omni-portal/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start services
        run: |
          cd omni-portal
          docker-compose up -d
          sleep 30

      - name: Run Lighthouse CI
        working-directory: omni-portal/frontend
        run: lhci autorun || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run backend performance tests
        working-directory: omni-portal/backend
        run: |
          composer install
          vendor/bin/phpunit tests/Performance/ --testdox || true

      - name: Stop services
        if: always()
        run: |
          cd omni-portal
          docker-compose down

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.onboarding-portal.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          echo "Deployment completed successfully"

      - name: Run smoke tests
        run: |
          sleep 30
          echo "Running smoke tests..."
          # curl -f https://staging.onboarding-portal.com/health || exit 1
          # curl -f https://staging.onboarding-portal.com/api/health || exit 1

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        continue-on-error: true
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}