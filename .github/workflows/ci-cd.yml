name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          coverage: xdebug
      
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: omni-portal/backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      
      - name: Install dependencies
        working-directory: ./omni-portal/backend
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          cp .env.example .env
          php artisan key:generate
      
      - name: Run migrations
        working-directory: ./omni-portal/backend
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: test_db
          DB_USERNAME: test_user
          DB_PASSWORD: test_pass
        run: php artisan migrate --force
      
      - name: Run tests with coverage
        working-directory: ./omni-portal/backend
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          REDIS_HOST: 127.0.0.1
        run: |
          php artisan test --coverage --min=70
          vendor/bin/phpstan analyse --level=5 app
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./omni-portal/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: omni-portal/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./omni-portal/frontend
        run: npm ci
      
      - name: Lint
        working-directory: ./omni-portal/frontend
        run: npm run lint
      
      - name: Type check
        working-directory: ./omni-portal/frontend
        run: npm run typecheck
      
      - name: Run tests with coverage
        working-directory: ./omni-portal/frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Build
        working-directory: ./omni-portal/frontend
        run: npm run build
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./omni-portal/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and Push Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./omni-portal/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.austa-portal.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging..."
          # Add deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://austa-portal.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production server
        run: |
          echo "Deploying to production..."
          # Add deployment commands here

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/home
          uploadArtifacts: true
          temporaryPublicStorage: true