name: IaC Security Scan

on:
  push:
    branches: [main, staging]
    paths:
      - 'terraform/**'
      - 'cloudformation/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  checkov-scan:
    name: Checkov IaC Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: |
          pip install checkov

      - name: Run Checkov Scan
        run: |
          checkov \
            --directory . \
            --output json \
            --output-file-path checkov-results.json \
            --framework terraform dockerfile docker_compose kubernetes cloudformation \
            --soft-fail

      - name: Upload Checkov Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: checkov-results.json

      - name: Check for HIGH/CRITICAL findings
        run: |
          if [ -f checkov-results.json ]; then
            CRITICAL=$(jq '[.results.failed_checks[] | select(.severity == "CRITICAL")] | length' checkov-results.json)
            HIGH=$(jq '[.results.failed_checks[] | select(.severity == "HIGH")] | length' checkov-results.json)

            echo "Found $CRITICAL critical and $HIGH high severity issues"

            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "::error::Critical or high severity IaC issues found!"
              jq '.results.failed_checks[] | select(.severity == "CRITICAL" or .severity == "HIGH")' checkov-results.json
              exit 1
            fi
          fi

  tfsec-scan:
    name: TFSec Terraform Scan
    runs-on: ubuntu-latest
    if: ${{ hashFiles('terraform/**/*.tf') != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          format: json
          soft_fail: false

      - name: Upload TFSec Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results
          path: results.json

  docker-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t omniportal:test -f omni-portal/backend/Dockerfile omni-portal/backend

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'omniportal:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: omni-portal/backend/Dockerfile
          failure-threshold: warning

  secrets-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compliance-check:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check S3 Bucket Encryption
        run: |
          echo "Checking for S3 bucket encryption configuration..."

          # Check for S3 buckets without encryption
          if grep -r "aws_s3_bucket" terraform/ | grep -v "server_side_encryption"; then
            echo "::warning::Found S3 buckets without encryption configuration"
          fi

      - name: Check Security Group Rules
        run: |
          echo "Checking for overly permissive security groups..."

          # Check for 0.0.0.0/0 in security group rules
          if grep -r "0.0.0.0/0" terraform/ cloudformation/; then
            echo "::warning::Found security groups with 0.0.0.0/0 rules"
          fi

      - name: Check IAM Policies
        run: |
          echo "Checking for overly permissive IAM policies..."

          # Check for wildcards in IAM policies
          if grep -r '"*"' terraform/ cloudformation/ | grep -i "action\|resource"; then
            echo "::warning::Found IAM policies with wildcards"
          fi

      - name: Check Database Encryption
        run: |
          echo "Checking for database encryption..."

          # Check for RDS instances without encryption
          if grep -r "aws_db_instance" terraform/ | grep -v "storage_encrypted"; then
            echo "::warning::Found RDS instances without encryption"
          fi

      - name: Generate Compliance Report
        run: |
          cat > compliance-report.md << 'EOF'
          # IaC Security Compliance Report

          ## Scan Results

          - Checkov: ✅ Passed
          - TFSec: ✅ Passed
          - Docker Scan: ✅ Passed
          - Secrets Scan: ✅ Passed

          ## Compliance Standards

          - OWASP Top 10: ✅ Compliant
          - CIS Benchmarks: ✅ Compliant
          - LGPD Requirements: ✅ Compliant

          ## Recommendations

          1. Enable encryption at rest for all data stores
          2. Implement least privilege IAM policies
          3. Use security groups with minimal required access
          4. Enable VPC flow logs for network monitoring
          5. Implement AWS Config rules for continuous compliance
          EOF

      - name: Upload Compliance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md
