name: Analytics Contract Tests

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'apps/web/lib/analytics/**'
      - 'apps/web/tests/analytics/**'
      - '.github/workflows/analytics-contracts.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/web/lib/analytics/**'
      - 'apps/web/tests/analytics/**'
      - '.github/workflows/analytics-contracts.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  ANALYTICS_SALT: ${{ secrets.ANALYTICS_SALT || 'default_test_salt' }}

jobs:
  analytics-contract-validation:
    name: Validate Analytics Schema Contracts
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: ./apps/web
        run: npm ci

      - name: Validate JSON schemas
        working-directory: ./apps/web
        run: |
          echo "Validating JSON schema files..."
          # Check all schema files are valid JSON
          for file in lib/analytics/schemas/*.json; do
            echo "Validating $file"
            cat "$file" | jq empty || exit 1
          done
          echo "All schemas are valid JSON"

      - name: Run Analytics Contract Tests
        working-directory: ./apps/web
        env:
          NODE_ENV: test
          ANALYTICS_SALT: ${{ env.ANALYTICS_SALT }}
        run: |
          npm run test:analytics -- --ci --coverage --maxWorkers=2

      - name: Check test coverage
        working-directory: ./apps/web
        run: |
          echo "Checking analytics contract test coverage..."
          # Ensure contract tests achieve 100% schema coverage
          npm run test:analytics -- --ci --coverage --coverageReporters=json-summary

          # Parse coverage and fail if below 95%
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Contract test coverage: $COVERAGE%"

          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "Error: Contract test coverage ($COVERAGE%) is below required 95%"
            exit 1
          fi

      - name: Validate no PII/PHI in fixtures
        working-directory: ./apps/web
        run: |
          echo "Scanning fixtures for PII/PHI patterns..."

          # Check for common PII patterns
          VIOLATIONS=0

          # CPF pattern
          if grep -rE '\b[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}\b' tests/analytics/fixtures/; then
            echo "ERROR: Found CPF pattern in fixtures"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi

          # Email addresses (excluding domain-only)
          if grep -rE '\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b' tests/analytics/fixtures/ | grep -v '"email_domain"'; then
            echo "ERROR: Found email addresses in fixtures"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi

          # Phone numbers
          if grep -rE '\([0-9]{2}\)\s?[0-9]{4,5}-?[0-9]{4}' tests/analytics/fixtures/; then
            echo "ERROR: Found phone numbers in fixtures"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi

          # RG pattern
          if grep -rE '\b[0-9]{2}\.[0-9]{3}\.[0-9]{3}-[0-9]{1}\b' tests/analytics/fixtures/; then
            echo "ERROR: Found RG pattern in fixtures"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi

          if [ $VIOLATIONS -gt 0 ]; then
            echo "CRITICAL: Found $VIOLATIONS PII/PHI violations in fixtures"
            exit 1
          fi

          echo "No PII/PHI patterns detected in fixtures"

      - name: Validate schema consistency
        working-directory: ./apps/web
        run: |
          echo "Validating schema consistency..."

          # Check all schemas have required fields
          for schema in lib/analytics/schemas/*.schema.json; do
            # Skip base-event schema
            if [[ "$schema" == *"base-event"* ]]; then
              continue
            fi

            # Check for required fields
            if ! grep -q '"$id"' "$schema"; then
              echo "ERROR: Schema $schema missing \$id field"
              exit 1
            fi

            if ! grep -q '"title"' "$schema"; then
              echo "ERROR: Schema $schema missing title field"
              exit 1
            fi

            if ! grep -q '"description"' "$schema"; then
              echo "ERROR: Schema $schema missing description field"
              exit 1
            fi
          done

          echo "All schemas have required fields"

      - name: Generate contract test report
        if: always()
        working-directory: ./apps/web
        run: |
          npm run test:analytics -- --ci --json --outputFile=analytics-contract-report.json || true

          echo "### Analytics Contract Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          TOTAL_TESTS=$(cat analytics-contract-report.json | jq '.numTotalTests // 0')
          PASSED_TESTS=$(cat analytics-contract-report.json | jq '.numPassedTests // 0')
          FAILED_TESTS=$(cat analytics-contract-report.json | jq '.numFailedTests // 0')

          echo "**Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "**Passed:** $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "**Failed:** $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $FAILED_TESTS -gt 0 ]; then
            echo "‚ùå **Contract validation FAILED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **All contract tests PASSED**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analytics-contract-test-results
          path: |
            apps/web/analytics-contract-report.json
            apps/web/coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/lcov.info
          flags: analytics-contracts
          name: analytics-contract-coverage
          fail_ci_if_error: true

  schema-drift-detection:
    name: Detect Schema Drift
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: Compare schemas
        run: |
          echo "Checking for schema changes..."

          SCHEMA_CHANGES=0

          for schema in apps/web/lib/analytics/schemas/*.schema.json; do
            SCHEMA_NAME=$(basename "$schema")
            BASE_SCHEMA="base-branch/apps/web/lib/analytics/schemas/$SCHEMA_NAME"

            if [ -f "$BASE_SCHEMA" ]; then
              if ! diff -q "$schema" "$BASE_SCHEMA" > /dev/null; then
                echo "‚ö†Ô∏è  Schema changed: $SCHEMA_NAME"
                SCHEMA_CHANGES=$((SCHEMA_CHANGES + 1))

                echo "### Schema Change Detected: $SCHEMA_NAME" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
                diff "$BASE_SCHEMA" "$schema" >> $GITHUB_STEP_SUMMARY || true
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "üìù New schema: $SCHEMA_NAME"
              SCHEMA_CHANGES=$((SCHEMA_CHANGES + 1))
            fi
          done

          if [ $SCHEMA_CHANGES -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: $SCHEMA_CHANGES schema file(s) changed"
            echo "Please ensure:"
            echo "  1. Changes are backward compatible"
            echo "  2. Version numbers are updated if needed"
            echo "  3. Documentation is updated"
            echo "  4. Analytics team is notified"
            echo ""
          else
            echo "‚úÖ No schema changes detected"
          fi

  required-checks:
    name: Analytics Contract Tests - Required
    runs-on: ubuntu-latest
    needs: [analytics-contract-validation, schema-drift-detection]
    if: always()

    steps:
      - name: Check required jobs
        run: |
          if [ "${{ needs.analytics-contract-validation.result }}" != "success" ]; then
            echo "Analytics contract validation failed"
            exit 1
          fi

          if [ "${{ needs.schema-drift-detection.result }}" == "failure" ]; then
            echo "Schema drift detection failed"
            exit 1
          fi

          echo "‚úÖ All required analytics contract checks passed"
